<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Begginer Developer</title>
  
  
  <link href="https://devjang.github.io/feed.xml" rel="self"/>
  
  <link href="https://devjang.github.io/"/>
  <updated>2020-10-18T13:19:15.070Z</updated>
  <id>https://devjang.github.io/</id>
  
  <author>
    <name>DevJang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>우아한 테크러닝 3기 React &amp; TypeScript 후기</title>
    <link href="https://devjang.github.io/2020/10/17/2020-10-17-woowahan-tech-learning-3rd/"/>
    <id>https://devjang.github.io/2020/10/17/2020-10-17-woowahan-tech-learning-3rd/</id>
    <published>2020-10-16T15:00:00.000Z</published>
    <updated>2020-10-18T13:19:15.070Z</updated>
    
    <content type="html"><![CDATA[<p>우아한 테크러닝 3기 React &amp; TypeScript 정리</p><a id="more"></a><hr><h2 id="1회차"><a href="#1회차" class="headerlink" title="1회차"></a>1회차</h2><h3 id="강의-목표"><a href="#강의-목표" class="headerlink" title="강의 목표"></a>강의 목표</h3><ul><li>수많은 주니어들이 스스로 잘 하고 있는지 고민과 의문에 도움을 주고자 한다.</li><li>네트워킹에 대한 욕심이 커 보인다 (코드리뷰, 사수, 피드백)</li><li>코드 품질 아키텍처 적정기술<ul><li>동작은 하지만 설계가 옳은 것인지</li></ul></li></ul><h3 id="김민태님-소개"><a href="#김민태님-소개" class="headerlink" title="김민태님 소개"></a>김민태님 소개</h3><ul><li>90년대부터 개발한 아재 개발자</li><li>저수준을 바닥부터 구현했던 시절</li></ul><h3 id="도구와-학습의-관계"><a href="#도구와-학습의-관계" class="headerlink" title="도구와 학습의 관계"></a>도구와 학습의 관계</h3><ul><li>이제는 도구를 잘 사용하는 시대가 왔다<ul><li>TypesScript, React 등등…</li></ul></li><li>어떤 도구를 쓰더라도 <code>원천을 이해하는 것이 가장 잘 사용하는 것이다.</code><ul><li>만든 사람의 의도 혹은 솔루션<ul><li>이러한 흐름을 놓치게 된다면 불편함에 놓이게 된다.</li></ul></li><li>도구는 도구일뿐 사용하는 관점을 발견할 수도 있는 것</li></ul></li><li><strong>언어를 배울 때 경력과 실력에 상관없이 가벼운 학습 후 막힐 때는 구글링에 의존하는 개발자가 많은 것 같다</strong></li><li>최근에는 조금 길더라도 읽기 쉽고 <strong>명시적인 코드를 선호하는 흐름</strong></li></ul><h3 id="React-amp-TypeScript"><a href="#React-amp-TypeScript" class="headerlink" title="React &amp; TypeScript"></a>React &amp; TypeScript</h3><ul><li>Type Alias<ul><li>타입에 <strong>별명</strong>을 통해 의미를 부여할 수 있다</li></ul></li><li>컴파일과 런타임 구분을 잘하자<ul><li>타입스크립트를 쓰면 런타임까지 보장된다고 생각하지만 그렇지 않다</li></ul></li><li>Babel<ul><li>React의 JSX를 트랜스파일링하는 역할을 한다</li></ul></li><li>CRA<ul><li>과거에는 웹팩부터 모든 설정을 직접 했었으나 미리 만들어진 템플릿을 사용할 수 있어진다</li><li>자신들만의 설정을 강요한다</li><li>개인적으로 프로덕션 앱을 만들때는 권장하지 않는 편이다</li><li>Eject는 너무 방대하기때문에 추천하기 어렵다</li></ul></li><li>JSX<ul><li>결국 React의 createElement문을 더 편리하게 사용할 수 있는 것 뿐이다.</li></ul></li><li>React.StrictMode<ul><li>React 개발을 하면서 생기는 문제 상황을 알려준다.</li></ul></li><li>Redux<ul><li>과거에는 이것만 사용할때가 있었다</li><li>굉장히 간단하지만 그 간단함 때문에 어려워하는 측면이 있다</li><li>단순한 기능만 제공하는데도 복잡한 걸 하려니 굉장히 어려워지는 것</li><li>불필요한 행동이 많다</li></ul></li><li>MobX<ul><li>Redux와 비교 대상이라고 보기 어려우며 대체품도 아니다</li><li>프로덕션 환경에서도 많이 활용되고 있는 상황이다</li><li>유연성이 주는 장점과 단점을 가지고 있다</li></ul></li></ul><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h3><ul><li>회사에서 앵귤러를 사용하다 보니 초조하다<ul><li>앵귤러가 가진 철학과 방향도 충분히 좋다</li><li>개발자라면 앵귤러만 했어도 상황에 따라 리액트를 습득해서 잘하면 된다</li></ul></li><li>Context API 사용해도 되지 않는가<ul><li>너무 많은 의존성이 생기면 당연히 좋지 않다. 페이스북 개발팀에서도 안내하고 있는 사항</li></ul></li><li>아직 주니어인데 앞으로 어떻게 공부해서 성장해야 할지 모르겠어요<ul><li>주니어가 시니어보다 유리한 점은 시간이 많고 여유가 있다 초조해하지 말고 여유를 가지며 의도적으로 훈련하자</li></ul></li></ul><hr><h2 id="2회차"><a href="#2회차" class="headerlink" title="2회차"></a>2회차</h2><h3 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h3><ul><li>Function of JavaScript<ul><li>함수는 값이며 모든 값은 대입될 수 있다.</li><li>함수를 인자로 받아 해당 함수를 반환하는 함수를 <code>1급 함수</code>라고 한다.</li></ul></li><li>Closure<ul><li><code>내부의 값을 캡처</code>해놓는다</li><li>값을 보호할 때 사용한다</li><li>모듈 패턴이라고도 불리운다</li></ul></li><li>새로운 형태에 현혹되지 말자 (어려운 개념)<ul><li><code>심호흡을 하며 하나하나 분해해보는 용기를 가자</code></li><li>새로운 개념을 만드는 경우는 드물다</li></ul></li></ul><h3 id="비동기-amp-동기"><a href="#비동기-amp-동기" class="headerlink" title="비동기 &amp; 동기"></a>비동기 &amp; 동기</h3><ul><li><code>사람의 생각은 동기인데 코드의 동작 방식은 비동기라 어렵다</code><ul><li>똑똑한 사람들이 어려울 때는 안 어렵게 만드는 방법을 찾아보다</li></ul></li><li>Callback Function<ul><li>비동기 코드를 동기 코드처럼 동작하도록 만들어본다.</li><li>중첩 CallBack 지옥을 가질 수 있다.</li></ul></li><li>Promise<ul><li>내부의 스코프를 resolve를 통해 받아보는 것이 Closure와 같다</li><li>then 을 가진 인스턴스를 생성할 수 있다</li></ul></li><li>Async &amp; Await<ul><li>async를 선언한 함수</li><li>await를 then처럼 사용할 수 있다</li></ul></li></ul><h3 id="Q-amp-A-1"><a href="#Q-amp-A-1" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h3><ul><li>우형에 들어갈 수 있는 방법은 어떻게 되나요<ul><li>6개월마다 지원 가능합니다 도전!</li><li>나이는 보지 않습니다</li></ul></li><li>FE 코테는 어떻게 준비할까요<ul><li>다들 준비해 줍니다 편하신 대로 하세요</li></ul></li><li>FE가 UI도 해야할까요? (CSS 해야하는지)<ul><li>앙꼬 없는 찐빵입니다</li></ul></li><li>세미콜론 안 쓰는 이유는?<ul><li>귀찮은 일은 기계를 시킵시다</li></ul></li><li>프론트 자격사항은 다양하다 백엔드는 어느정도까지 준비해야할지 팁이 필요합니다<ul><li>기승전 스프링과 그 외에 CS와 몇몇 구현체를 학습하는 게 중요하니 기본에 충실하는 걸 잊지 말아야 합니다</li></ul></li><li>브라우저에 대한 공부<ul><li>크로미움과 V8 소스를 까봐야 한다</li><li>자신의 수준을 먼저 알아야 한다</li><li>주화입마에 빠지지 않은 전략이 필요하다</li></ul></li><li>프론트 개발자에게 CS 역량은 얼마나 중요할까요<ul><li>결국 다 필요합니다</li><li>꾸준히 합시다</li><li>사이드프로젝트를 만들어서 볼륨을 키워보고 단계마다 전략학습을 해봅시다</li></ul></li><li>클로저가 있는데 커링을 사용할 필요가 있을까요<ul><li>인자를 나누는 것</li><li>어차피 거기서 거기다. 클로저에 대한 이해가 부족해 보인다.</li></ul></li></ul><h3 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h3><ul><li>Flux 아키텍처 이후로 완전한 주류가 되었다.</li><li>VDom 알고리즘과 상호작용하기 좋은 구조다.</li><li>컴포넌트에서 상태를 바꾸지 못하도록 한다.</li></ul><hr><h2 id="3회차"><a href="#3회차" class="headerlink" title="3회차"></a>3회차</h2><ul><li>새로운 것을 습득할 때는 항상 공부할 것이 많이 보인다.</li><li>남들의 코드를 배우고 새로운 것을 읽히면 넓이만 추구하게 된다</li><li>이름만 잘 지어도 중간은 간다</li><li>JS의 객체는 원시 값보다 다루기 쉬운 구조다</li><li>WHY without 10년차 개발자 &lt; WHY with 10년차 개발자 <ul><li>WHY를 탐구하고 기본을 탄탄하게 다지자 =&gt; 몸값으로 증명</li></ul></li><li>공식 문서를 자주 보자</li></ul><h3 id="React-기본-개념"><a href="#React-기본-개념" class="headerlink" title="React 기본 개념"></a>React 기본 개념</h3><ul><li>React는 단일 Virtual DOM을 가진다.</li><li>DOM<ul><li>HTML 요소를 JavaScript로 다룬다.</li></ul></li><li>Virtual DOM<ul><li>DOM을 JavaScript로 더욱 쉽게 다룬다.</li></ul></li><li>React.createElement()<ul><li>Virtual DOM을 만든다</li></ul></li><li>ReactDOM.render()<ul><li>Virtual DOM =&gt; Real DOM</li></ul></li><li>React는 <code>DOM에 의미를 부여</code>할 수 있는 장점을 가진다.</li><li>React 컴포넌트에 무언가 넘기는 방법은 Children &amp; Props뿐</li><li><strong>React가 해주는 것과 트랜스파일러가 해주는 것을 구분해야 한다.</strong></li><li><code>런타임 시점에서 일어나는 일과 컴파일 타임에 일어나는 일을 인지해야 한다.</code></li><li>성능에 문제가 없다면 <code>일관성을 지키는 것이 굉장히 중요</code></li></ul><h3 id="React-API"><a href="#React-API" class="headerlink" title="React API"></a>React API</h3><ul><li>Class Component<ul><li>완전한 객체 구조</li><li><strong>라이프사이클 통제 가능</strong></li></ul></li><li>Function Component<ul><li>과거에는 컴포넌트가 호출될 때마다 상태가 생성되어 상태를 유지할 수 없었다.</li><li>라이프 사이클 및 상태를 가질 수 없다</li><li>기본적으로 계속 재 호출하는 형태로 구현되어 있다.</li></ul></li><li>Hook API<ul><li>메커니즘을 이해하는 게 좋다</li><li>전역 배열로 관리되며 생성되는 순서에 맞춰 key로 부여 후 인덱싱</li><li>내부 코드를 모두 이해할 수는 없지만 컨셉적인 측면을 이해해야 도움이 된다</li><li>최상위가 아닌 부분에서 호출 =&gt; 전역 배열에 문제 발생 =&gt; 원치 않는 값 반환 가능</li></ul></li></ul><hr><h2 id="4회차"><a href="#4회차" class="headerlink" title="4회차"></a>4회차</h2><h3 id="개발자의-소통"><a href="#개발자의-소통" class="headerlink" title="개발자의 소통"></a>개발자의 소통</h3><ul><li>의사소통시 프로토콜이 어긋나는 경우가 특히 많다</li><li>쏟아내는 방식의 일방적인 소통은 좋지 않다</li><li>높고 낮은 이해의 수준보다 <code>상대방과의 수준을 맞추는 것이 중요</code></li><li>상대방이 이해할 수 있는 레이어 파악이 중요</li></ul><h3 id="Generator"><a href="#Generator" class="headerlink" title="Generator"></a>Generator</h3><ul><li>코루틴의 구현체</li><li><code>function*</code>, <code>yield</code> 키워드 사용</li><li>Generator, Promise, Async &amp; Await는 밀접한 관련이 있다</li><li>단순화된 일반화된 것들은 여러 방향으로 사용할 수 있어 어렵다</li><li>Redux-saga에서 사용됨</li></ul><h3 id="아키텍처"><a href="#아키텍처" class="headerlink" title="아키텍처"></a>아키텍처</h3><ul><li>굉장히 거대한 것처럼 느끼지만 실제로는 작은 코드에서부터 시작</li><li>작은 코드에서부터 어떻게 아키텍처를 잡아갈지가 더 중요</li><li>거대해지기 전에 미리 쪼개자</li></ul><h3 id="Garbage-Collector"><a href="#Garbage-Collector" class="headerlink" title="Garbage Collector"></a>Garbage Collector</h3><ul><li>엔진이 어떤 알고리즘으로 알아서 진행</li><li>Garbage<ul><li>정리되지 않은 메모리</li><li>유효하지 않은 메모리 주소</li></ul></li><li>Mark<ul><li>객체의 참조를 찾는 과정</li></ul></li><li>Sweep<ul><li>Mark 되어있지 않은 객체들을 제거</li></ul></li></ul><h3 id="Hook-API"><a href="#Hook-API" class="headerlink" title="Hook API"></a>Hook API</h3><ul><li>useEffect<ul><li>렌더링 이후 내부 함수 호출</li><li>제어 불가능한 요소들을 주로 다룬다</li><li>실제 메모리에 관련된 것들을 해제해주지는 않는다.</li></ul></li><li>Hook 자체는 Closure가 아니다.<ul><li>하지만 Hook을 사용할 때 당연히 Closure 캡처</li></ul></li></ul><hr><h2 id="5회차"><a href="#5회차" class="headerlink" title="5회차"></a>5회차</h2><h3 id="Redux-1"><a href="#Redux-1" class="headerlink" title="Redux"></a>Redux</h3><ul><li>예측 가능한 상태 컨테이너로 상태 변화를 예측하기 쉽게 도와준다.</li><li>멱등성<ul><li>수 회의 연산을 적용해도 같은 결과를 보이는 성질</li><li>Redux 로직을 실행할 때마다 결과가 다를 수 있는 경우가 존재 (비동기)</li></ul></li><li>커링<ul><li>함수 지연 호출 가능</li><li>인자와 인자 사이에 대해 개입 가능한 기법</li></ul></li><li>Redux는 동기적 처리 흐름을 가진다<ul><li>비동기 작업 처리를 위해 미들웨어 이용</li></ul></li></ul><h3 id="미들웨어"><a href="#미들웨어" class="headerlink" title="미들웨어"></a>미들웨어</h3><ul><li>Redux에서는 커링을 이용한다.</li><li>데이터가 처리 흐름 과정 중간을 거친다.</li><li>연결된 파이프 순서를 따르기 때문에 항상 같은 처리 흐름을 따른다.</li></ul><h3 id="Redux-Saga"><a href="#Redux-Saga" class="headerlink" title="Redux Saga"></a>Redux Saga</h3><ul><li>Side Effect event 관리</li><li>동작 메커니즘<ul><li>Action =&gt; 비동기 처리 =&gt; Middleware =&gt; Dispatch</li></ul></li></ul><h3 id="디자인-패턴"><a href="#디자인-패턴" class="headerlink" title="디자인 패턴"></a>디자인 패턴</h3><ul><li>Observer<ul><li>객체의 상태가 변화를 구독</li><li>의존성과 결합도가 높다<ul><li>모든 객체 상태를 구독받아야 한다.</li></ul></li><li>동기 방식</li></ul></li><li>Pub-Sub<ul><li>낮은 결합도</li><li>비동기 방식</li></ul></li><li>몽기 페칭<ul><li>실행 중인 코드의 일부분을 런타임 상태에서 바꾸는 기법</li><li>함수도 값이기 때문에 다른 객체의 메서드를 가져와 자신의 것처럼 사용</li><li>메서드를 선언 시점이 아닌 사용 시점에 확장하는 것</li></ul></li></ul><h3 id="공식문서"><a href="#공식문서" class="headerlink" title="공식문서"></a>공식문서</h3><ul><li>처음에는 무조건 봐야 한다.</li><li>1회 완독했다고 해서 이해된 것이 아니다.<ul><li>대략 1/3 이해한 정도</li></ul></li><li><strong>수많은 맥락과 배경지식을 전제로 하는 암묵적인 개념 파악 필요</strong></li></ul><hr><h2 id="6회차"><a href="#6회차" class="headerlink" title="6회차"></a>6회차</h2><h3 id="훈련-방법"><a href="#훈련-방법" class="headerlink" title="훈련 방법"></a>훈련 방법</h3><ul><li>엔진을 만드는 사람과 개발을 하는 사람 모두 알아야 하는 정보</li><li>어떠한 목표로 무엇을 배우고 있는지 항상 레이어 화해서 불필요한 학습시간을 최대한 줄이는 것이 좋다.</li></ul><h3 id="Webpack"><a href="#Webpack" class="headerlink" title="Webpack"></a>Webpack</h3><ul><li><p>전부 Node에서 실행</p></li><li><p>프로젝트의 구조를 분석하고 모듈 &amp; 리소스들을 묶고 패킹하는 모듈 번들러</p></li><li><p>Loader (컨버팅)</p><ul><li>미들웨어와 같은 역할</li></ul></li><li><p>Plugin (후처리)</p><ul><li>loader보다 더 복잡하고 많은 일을 처리할 수 있음</li><li>보통 loader가 모두 실행된 후 실행</li></ul></li><li><p>컴파일</p><ul><li>사람이 읽는 코드를 기계어 코드로 변환</li></ul></li><li><p>트랜스파일</p><ul><li>사람이 읽는 코드를 사람이 읽을 수 있는 코드로 변환</li></ul></li></ul><hr><h2 id="7회차"><a href="#7회차" class="headerlink" title="7회차"></a>7회차</h2><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul><li>일종의 상태 머신이자 도구, 그리고 인터페이스</li><li><code>then</code> 체이닝을 통해 작업을 연결할 수 있다</li></ul><h3 id="리액트를-사용하는-이유"><a href="#리액트를-사용하는-이유" class="headerlink" title="리액트를 사용하는 이유"></a>리액트를 사용하는 이유</h3><ul><li>개발하는 재미</li><li>사용하는 개발자들이 많음</li><li>높은 자유도와 취사선택</li></ul><h3 id="컴포넌트-구조"><a href="#컴포넌트-구조" class="headerlink" title="컴포넌트 구조"></a>컴포넌트 구조</h3><ul><li><p>상태에 의존적인 컴포넌트와 그렇지 않은 컴포넌트 분리</p></li><li><p>비즈니스 로직</p><ul><li>상태를 변경 시 상태에 대한 출처와 선택을 포함하는 코드들로 단지 props로 내려받는 것과 전혀 다름</li></ul></li><li><p>Atomic Design Pattern</p><ul><li>너무 조립적이다</li><li>유연성이 떨어진다</li><li>조직의 상황에 맞게 해야 한다.</li></ul></li><li><p>구분의 기준</p><ul><li>외부와의 관계를 어떻게 가지는지</li><li>외부와의 흐름을 어떻게 가지는지</li></ul></li><li><p>컨테이너</p><ul><li>데이터를 전달하는 역할로 로직을 포함</li><li>여러 하위 컴포넌트들을 결합</li><li>하나의 페이지를 구성</li><li>페이지와 1:1 or 1:N 구성 가능</li><li>UI 혹은 스타일 상태를 가지지 않는다</li></ul></li><li><p>일반 컴포넌트</p><ul><li>순수하게 역할에 맞는 렌더링 </li><li>웬만하면 로직 없는 곳</li></ul></li><li><p>코드 스플리팅</p><ul><li>초기 로딩 최적화를 위함</li><li>화면을 뿌리는 단위</li></ul></li><li><p>SSR</p><ul><li>서버의 부하 고려</li><li>트래픽 및 인스턴스 고려</li></ul></li><li><p>백오피스 구조</p><ul><li>스케일은 크지만 복잡도는 낮은 케이스</li></ul></li><li><p>폴더 구조</p><ul><li>폴더 구조 자체가 디펜던시이다</li><li>바깥쪽에서는 네이밍으로만 소통하도록 해보자</li></ul></li><li><p>Maybe Component</p><ul><li>Conditional Rendering 이용시 삼항연산자의 떨어지는 가독성 최소화</li></ul></li></ul><h3 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h3><ul><li>컴파일 타임에서의 검사이지 런타임에서 타입 검사를 하지는 않는다.</li><li>Type Alias vs Interface<ul><li>기능적으로는 굉장히 유사</li><li>개인적으로는 props =&gt; Interface / 그 외의 내부 데이터는 Type Alias</li></ul></li><li>Interface<ul><li>외부에 노출시켜주는 느낌으로 사용</li></ul></li><li>Type Alias<ul><li>상태를 규격화</li></ul></li><li>Generic<ul><li>여러 타입에 유연하게 대응</li></ul></li></ul><h3 id="Q-amp-A-2"><a href="#Q-amp-A-2" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h3><ul><li>개발자는 많지만 쓸만한 개발자는 없다</li><li>과한 패턴에 대한 집착을 유연성을 잃게 만든다</li><li>Redux는 MVC에 적합</li><li>MobX는 MVVM에 적합</li><li>포트폴리오는 주로 코드만 확인한다</li><li>이력서의 경력기술서로 실력을 검증할 수 없다.<ul><li>구조에 대한 고민</li><li>상태에 대한 고민</li></ul></li><li>마크업을 잘할 수 있다고 말할 수 있는 조건<ul><li>시멘틱에 대한 이해</li><li>2D화면에서 Geometry의 이해</li></ul></li><li>나누는 것은 관심사의 분리로 생각하는 것이 좋다</li><li>새로운 기술을 공부하는 방법<ul><li>공식 문서 정독이 기본</li><li>이해하지 못한 것과 이해한 것들을 확인하는 과정이 필요</li></ul></li></ul><hr><h2 id="8회차"><a href="#8회차" class="headerlink" title="8회차"></a>8회차</h2><h3 id="Router"><a href="#Router" class="headerlink" title="Router"></a>Router</h3><ul><li>URL과 Component를 매칭시켜준다.</li><li>Hash Router는 잘 사용되지 않는다.</li></ul><h3 id="MobX"><a href="#MobX" class="headerlink" title="MobX"></a>MobX</h3><ul><li>Observable, Observer 등의 용어가 학습을 매우 힘들게 한다.</li><li>Primitive 타입의 변경은 알 수 없다.</li><li>Singleton 패턴을 자주 사용</li><li>autorun<ul><li>상태가 바뀌면 내부의 함수 호출</li></ul></li><li>Action<ul><li>논리적인 작업 단계</li></ul></li><li>Flow<ul><li>비동기 작업</li></ul></li><li>MobX vs Redux<ul><li>Redux<ul><li>개인적으로 선호한다</li></ul></li><li>MobX<ul><li>실수하기 쉬운 환경을 제공한다</li><li>쉽지만 블랙박스 같은 느낌이 있다</li></ul></li></ul></li><li>무언가 분석할 때는 가장 만만한 녀석들부터 분석한다</li><li>테스트<ul><li>성공하는 테스트<ul><li>반드시 성공해야 한다.</li></ul></li><li>실패하는 테스트<ul><li>반드시 실패해야 한다.</li></ul></li><li>규모가 커질수록 복잡도가 늘어진다면 의존성 문제다</li></ul></li></ul><hr><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>원래 오프라인 30명 정도를 선발하려했 으나 코로나 때문에 500명가량을 선발했다고 한다.<br>(애매한 중니어 경력이라 운이 좋게도 참석할 수 있었다)</p><p>김민태님의 강의는 언제나 견문을 넓히는 좋은 조언을 들을 수 있어 좋다.<br>기술적인 이해나 접근보다는 내가 했던 고민과 앞으로 할 수 있는 고민에 대해 또 다른 시각으로 바라볼 수 있는 계기가 되어 매우 값진 시간이었고</p><p>코로나가 나아진다면 오프라인에서 또 다시 좋은 기회가 있기를 바란다.</p><hr><h3 id="관련-링크"><a href="#관련-링크" class="headerlink" title="관련 링크"></a>관련 링크</h3><ul><li><a href="https://gist.github.com/ibare/1ed63de0c09c94a7ac79713d57b80f8d">https://gist.github.com/ibare/1ed63de0c09c94a7ac79713d57b80f8d</a></li><li><a href="https://gist.github.com/ibare/c736f63fba835c172e60aa98a996dada">https://gist.github.com/ibare/c736f63fba835c172e60aa98a996dada</a></li><li><a href="https://gist.github.com/ibare/c7020756170aa7ed3d1cc84f86972409">https://gist.github.com/ibare/c7020756170aa7ed3d1cc84f86972409</a></li><li><a href="https://gist.github.com/ibare/0eb8597551070bf1ebf8e797439913a3">https://gist.github.com/ibare/0eb8597551070bf1ebf8e797439913a3</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;우아한 테크러닝 3기 React &amp;amp; TypeScript 정리&lt;/p&gt;</summary>
    
    
    
    <category term="programming" scheme="https://devjang.github.io/categories/programming/"/>
    
    <category term="react" scheme="https://devjang.github.io/categories/programming/react/"/>
    
    
    <category term="TypeScript" scheme="https://devjang.github.io/tags/TypeScript/"/>
    
    <category term="React" scheme="https://devjang.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>모던 스타트업</title>
    <link href="https://devjang.github.io/2020/09/27/2020-09-27-modern-startup/"/>
    <id>https://devjang.github.io/2020/09/27/2020-09-27-modern-startup/</id>
    <published>2020-09-26T15:00:00.000Z</published>
    <updated>2020-10-18T12:47:33.716Z</updated>
    
    <content type="html"><![CDATA[<p>팀 생산성을 높여주는 21가지 도구와 서비스</p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 한빛미디어<br>저자 : 이기곤<br>출간 : 2018-08-20<br>페이지 : 300<br>ISBN : 9791162241059<br>가격 : 20,000원</p></blockquote><ul><li>자세한 정보<br>: <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=13884289">http://book.naver.com/bookdb/book_detail.nhn?bid=13884289</a><br>: <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B1211451725">http://www.hanbit.co.kr/store/books/look.php?p_code=B1211451725</a></li></ul><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>스타트업을 운영하며 필요한 도구와 서비스를 요약해주는 <strong>모던 스타트업</strong>을 리뷰하게 되었다.</p><p>나름 얇은 책이라 부담없이 가벼운 마음으로 읽어볼 수 있어 빠르게 훑어볼 수 있었다.</p><h2 id="맥락-파악에-훌륭"><a href="#맥락-파악에-훌륭" class="headerlink" title="맥락 파악에 훌륭"></a>맥락 파악에 훌륭</h2><p>스타트업 창업 3 ~ 5년내 폐업률이 70~80%에 육박한다.</p><p>하지만 스타트업은 아직도 쏟아져 나오고 있고<br>좋은 프로덕트 좋은 회사를 만들어보지도 못하고<br>망하는 스타트업이 많다는 증거이다.</p><p>스타트업은 빠르게 프로덕트를 만들어 투자를 받든가 캐시 카우를 하며 증명해내야 한다.</p><p><strong>이러한 상황에 프로젝트, 인프라, 서비스 등을 관리하지 않고 신규 개발에만 집중할 수 있을까?</strong></p><p>그러기가 쉽지 않다 누군가는 지속적으로 관심을 가져줘야 한다.<br>그래야 신규 개발 속도도 빨라지고 지금 하는 일을 더 잘할 수 있기 때문이다.</p><p>이 책에서는 그러한 관점에서 다양하고 넓은 범위에서 다양한 사례와 케이스를 소개해준다.</p><blockquote><p>즉 이러한 고민할 시간을 꽤나 많이 줄여줄 수 있다.</p></blockquote><h2 id="도구-지향적-방향"><a href="#도구-지향적-방향" class="headerlink" title="도구 지향적 방향"></a>도구 지향적 방향</h2><p>G Suite, Dropbox, Slack, GA, Jira, Github, Zeplin, AWS, Docker 등을 소개하는데<br>팀 혹은 간단한 프로젝트를 운영하는 데 있어서 당연하게 사용하는 것들도 많이 있고<br><strong>이런 수많은 도구들을 빠르게 설명하고 요약해준다.</strong><br>물론 이건 왜 있을까? 싶은 특이한 것들도 있다.</p><p>특히 Notion 같은 경우에는 특이할 정도로 국내에 유독 인기가 많은데<br>(물론 이 책이 작성되고 출판할 때는 이 정도 인기가 아니었다)<br>역시나 스타트업에서 큰 인기를 끌었고 그만큼 <strong>스타트업에서 넘치는 도구가 있음에도 불구하고<br>Needs가 존재했다는 방증 아닐까 싶다.</strong></p><blockquote><p>아무튼 결론적으로 이 책은 오로지 도구와 프로덕트를 출시하는 A to Z 기술적인 관점으로 가득하다.</p></blockquote><p>때문에 다양한 팀원 간에 올 수 있는 갈등이나 성과 측정 그리고 멘탈리티적인 측면이 없기 때문에<br>이런 부분을 기대하고 책을 읽어보려는 독자들에게는 타겟이 맞지 않다.</p><h2 id="운영보다는-빌드업"><a href="#운영보다는-빌드업" class="headerlink" title="운영보다는 빌드업"></a>운영보다는 빌드업</h2><p><img src="https://1.bp.blogspot.com/-aIlAObLJnLU/X3CRcLQznXI/AAAAAAAAeCw/daT5ArQebVk61oWMo2pwstGH2rocanPoQCLcBGAsYHQ/s2048/20200927_204634.jpg"></p><blockquote><p>개인적으로 가장 마음에 들었던 부분인 부록</p></blockquote><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ol><li><strong>CTO</strong>가 읽기에는 굉장히 모자르고</li><li><strong>CEO</strong>가 읽기에는 기술 지향적이며</li><li><strong>CPO</strong>가 읽기에는 프로젝트 관점에서 그나마 낫다 싶은 느낌이다.</li></ol><p>바꿔 말하자면 굉장히 넓은 현대 웹 생태계에서 빠르게 프로덕트를 출시하기 위해 달려나가는<br><code>스타트업의 팀원 그 누구에게나 얕은 지식을 배양해줄 수 있다.</code></p><p><strong>다양한 독자들의 식견에 맞춰 정보가 다르게 느껴질 수 있다.</strong></p><blockquote><p>그 다음 스테이지로 안내해줄 수 있는 좋은 길잡이가 되지 않을까?</p></blockquote><p><strong>이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;팀 생산성을 높여주는 21가지 도구와 서비스&lt;/p&gt;</summary>
    
    
    
    <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
    <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
    
    <category term="start-up" scheme="https://devjang.github.io/tags/start-up/"/>
    
  </entry>
  
  <entry>
    <title>개발 7년차, 매니저 1일차</title>
    <link href="https://devjang.github.io/2020/04/30/2020-04-30-the-manager-path/"/>
    <id>https://devjang.github.io/2020/04/30/2020-04-30-the-manager-path/</id>
    <published>2020-04-29T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.863Z</updated>
    
    <content type="html"><![CDATA[<p>개발만 해왔던 내가, 어느 날 갑자기 ‘팀’을 맡았다!</p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 한빛미디어<br>저자 : 카미유 푸르니에<br>역자 : 권원상 , 한민주<br>출간 : 2020-02-04<br>페이지 : 372<br>ISBN : 9791162242551<br>가격 : 22,000원</p></blockquote><ul><li>자세한 정보<br>: <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=16240506">http://book.naver.com/bookdb/book_detail.nhn?bid=16240506</a><br>: <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B3838365362">http://www.hanbit.co.kr/store/books/look.php?p_code=B3838365362</a></li></ul><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>이번에 리뷰하게될 이 책은 <a href="https://en.wikipedia.org/wiki/Camille_Fournier">Camille Fournier</a>의 <a href="https://www.amazon.com/Managers-Path-Leaders-Navigating-Growth/dp/1491973897">The Manager’s Path</a> 번역서인 <code>개발 7년차, 매니저 1일차</code>이다.</p><p>Camille Fournier는 MS 개발자를 시작으로 다양한 경험을 쌓은 CTO로 컨퍼런스를 통해  이러한 주제에 대한 스피커를 자주 맡고 있다.</p><p>사실 원서와는 다르게 제목부터 특이했고 여러 챕터에 있는 사례조차 굉장히 자극적이면서도 흥미로워 관심이 있었다.</p><p>한빛의 리뷰어를 통해 운 좋게 책을 읽어볼 수 있게 되었다.</p><h2 id="흥미로운-사례-제시"><a href="#흥미로운-사례-제시" class="headerlink" title="흥미로운 사례 제시"></a>흥미로운 사례 제시</h2><p>관리 측면에 대한 경험과 스토리텔링이 녹아져있다.</p><p>멘토링, 테크 리딩, 사람, 팀, 다수의 팀, 매니저 등등 다양한 관리를 통해 문화를 개선하고</p><p>결론적으로는 나 자신을 관리해야 한다는 통찰의 시점으로 가는 로드맵에 대한 흐름으로 읽힌다.</p><p>이 와중에 <code>시니어 개발자로 남을지, 매니저가 될지 선택하기</code>, <code>좋은 매니저, 나쁜 매니저 : 프로세스 독재자</code>, <code>도전 상황 : 성과가 낮은 사람 해고하기</code></p><p>같은 자극적인 챕터가 소소하게 있어 읽는 내내 흥미로운 부분이 있었다.</p><p>가끔 소제목에 비해 내용이 자극적이지 않아 김이 빠지는 경향도 있었으나 충분히 가치 있는 이야기였다.</p><h2 id="예비-팀장보다는-우리-모두를-위한-관리-기술"><a href="#예비-팀장보다는-우리-모두를-위한-관리-기술" class="headerlink" title="예비 팀장보다는 우리 모두를 위한 관리 기술"></a>예비 팀장보다는 우리 모두를 위한 관리 기술</h2><p>팀장으로 성장하는 내용을 주로 다루는 그런 내용이지만</p><p>결국은 <code>팀장이 아닌 반대 입장으로 읽을 수 있기 때문에</code> 공감되는 내용이 많이 있었다.</p><p>제목과 내용의 흐름이 팀장에 초점을 맞추고 있더라도 충분히 볼거리 많을 수밖에 없는 이유이기도 했다.</p><p>팀장이 왜 그렇게 행동할 수밖에 없었는지 팀장도 어쩌면 결국 같은 팀원이구나 하며</p><p><code>내가 팀장이라면</code> 나는 어떻게 했을까라는 가정도 가능했다.</p><h2 id="재미요소"><a href="#재미요소" class="headerlink" title="재미요소"></a>재미요소</h2><p>책의 중간중간</p><ul><li>CTO에게 묻는다</li><li>좋은 매니저, 나쁜 매니저,</li><li>자신의 경험 평가하기,</li><li>도전 상황</li></ul><p>위와 같은 코너를 통해 <code>사례에 대한 액션 플랜과 액션 아이템을 제시</code>하고 있어 깊이 <strong>고민할 시간을 가지며 자아성찰을 하게 된다.</strong></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>정년이 길어지는 동시에 인구와 고용은 감소하고 있다.</p><p>이런 상황에 개발자로서의 길을 계속 걸으며 많은 일과 수많은 고난을 겪게 될 것이다.</p><p>어쩌면 팀장이 되기 싫을 수 있을 수 있고 팀장이 되고 싶지만 될 수 없을 수도 있다.</p><p>국내 IT 상황과 100% 일치하지는 않지만 다양한 사례에 대한 액션을 많이 담고 있기 때문에</p><p><code>어려운 순간이나 슬럼프가 왔을 때 좋은 인생 멘토의 경험이라 생각하고 두고두고 펴볼 수 있을 것 같다.</code></p><p><strong>이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;개발만 해왔던 내가, 어느 날 갑자기 ‘팀’을 맡았다!&lt;/p&gt;</summary>
    
    
    
    <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
    <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
    
    <category term="MANAGER" scheme="https://devjang.github.io/tags/MANAGER/"/>
    
  </entry>
  
  <entry>
    <title>하버드 첫 강의 시간관리 수업</title>
    <link href="https://devjang.github.io/2019/12/01/2019-12-01-harvard-time-management/"/>
    <id>https://devjang.github.io/2019/12/01/2019-12-01-harvard-time-management/</id>
    <published>2019-11-30T15:00:00.000Z</published>
    <updated>2020-08-18T14:12:04.381Z</updated>
    
    <content type="html"><![CDATA[<p>벨로퍼트님의 리액트를 다루는 기술</p><a id="more"></a><h2 id="책을-보게된-이유"><a href="#책을-보게된-이유" class="headerlink" title="책을 보게된 이유"></a>책을 보게된 이유</h2><p>어느 정도 규모있는 회사에서 스타트업으로 이직 후 수많은 시련과 좌절을 하게 되었다.</p><p>정말 빠르게 프로덕트를 내야 하는 상황에서 일정에 대한 압박은 주말의 휴식조차 앗아가 버렸다.<br>주말임에도 불구하고 어떻게 업무를 하고 개발을 해야 빠르게 개발을 할 수 있을까 머릿속에 몇 번을 되뇌었다.<br>결국 쉬는 것 같지도 않고 월요일을 맞이하면 푹 쉬지 못한 주말이 이어지다 보니 번아웃의 연속이었다.</p><p>그러던 어느 날 SNS를 통해 <code>하버드 첫 강의 시간관리 수업</code>이라는 책의 리뷰를 보게 되었고<br>바로 서점을 향해 달려갔다.</p><hr><h3 id="1-무엇이-당신의-시간을-빼앗는가"><a href="#1-무엇이-당신의-시간을-빼앗는가" class="headerlink" title="1. 무엇이 당신의 시간을 빼앗는가?"></a>1. 무엇이 당신의 시간을 빼앗는가?</h3><h4 id="내-시간을-지키는-방법을-알아야-한다"><a href="#내-시간을-지키는-방법을-알아야-한다" class="headerlink" title="내 시간을 지키는 방법을 알아야 한다."></a>내 시간을 지키는 방법을 알아야 한다.</h4><ul><li>업무과부화가 있는 것인가?</li><li>툭하면 일을 미루고 있는 게 아닌가?</li></ul><h4 id="행동"><a href="#행동" class="headerlink" title="행동"></a>행동</h4><ul><li>버려지는 시간 계산</li><li>시간 사용 기록하기</li></ul><hr><h3 id="2-효율적인-시간관리-목표를-정하라"><a href="#2-효율적인-시간관리-목표를-정하라" class="headerlink" title="2. 효율적인 시간관리 목표를 정하라"></a>2. 효율적인 시간관리 목표를 정하라</h3><h4 id="목표가-있어야-시간을-제대로-쓴다"><a href="#목표가-있어야-시간을-제대로-쓴다" class="headerlink" title="목표가 있어야 시간을 제대로 쓴다"></a>목표가 있어야 시간을 제대로 쓴다</h4><ul><li>목표 설정</li><li>행동으로 옮기기</li></ul><h4 id="행동-1"><a href="#행동-1" class="headerlink" title="행동"></a>행동</h4><ul><li>목표를 정했다면 무조건 실천한다.</li><li>우선순위를 정하여 움직이자</li><li>파레토 법칙 이용하기</li></ul><hr><h3 id="3-나만의-시간관리표를-만들자"><a href="#3-나만의-시간관리표를-만들자" class="headerlink" title="3. 나만의 시간관리표를 만들자"></a>3. 나만의 시간관리표를 만들자</h3><h4 id="완벽주의에-의한-나쁜-영향-피하기"><a href="#완벽주의에-의한-나쁜-영향-피하기" class="headerlink" title="완벽주의에 의한 나쁜 영향 피하기"></a>완벽주의에 의한 나쁜 영향 피하기</h4><ul><li>효율적인 업무에 집중</li><li>완벽주의는 얻는 것보다 잃는 것이 더 많다.</li></ul><h4 id="행동-2"><a href="#행동-2" class="headerlink" title="행동"></a>행동</h4><ul><li>완벽보다는 규칙적으로 생활하자</li><li>완벽에 대한 고집을 버리고 평정심을 유지하자</li></ul><hr><h3 id="4-권한부여와-업무-위임은-더-효율적으로-시간을-이용할-수-있다"><a href="#4-권한부여와-업무-위임은-더-효율적으로-시간을-이용할-수-있다" class="headerlink" title="4. 권한부여와 업무 위임은 더 효율적으로 시간을 이용할 수 있다"></a>4. 권한부여와 업무 위임은 더 효율적으로 시간을 이용할 수 있다</h3><h4 id="업무-위임은-시간관리에서-가장-효율적인-수단이다"><a href="#업무-위임은-시간관리에서-가장-효율적인-수단이다" class="headerlink" title="업무 위임은 시간관리에서 가장 효율적인 수단이다"></a>업무 위임은 시간관리에서 가장 효율적인 수단이다</h4><ul><li>이미 끝낸 업무를 학습의 기회로 삼아야 한다.</li><li>영향력이 높은 일은 효율적이면서 가치가 높은 것을 선사한다.</li></ul><h4 id="행동-3"><a href="#행동-3" class="headerlink" title="행동"></a>행동</h4><ul><li>처음부터 확실한 규칙과 기대를 설정하자</li><li>업무 위임을 잘하기 위해서는 의사소통부터 잘해야 한다.</li><li>간단 명료한 설명이 필요하다.</li></ul><hr><h3 id="5-업무시간관리-장애-극복"><a href="#5-업무시간관리-장애-극복" class="headerlink" title="5. 업무시간관리 장애 극복"></a>5. 업무시간관리 장애 극복</h3><h4 id="주어진-환경에서-최선을-다하자"><a href="#주어진-환경에서-최선을-다하자" class="headerlink" title="주어진 환경에서 최선을 다하자"></a>주어진 환경에서 최선을 다하자</h4><ul><li>미루는 태도는 꼭 고쳐야 하는 나쁜 습관이다.</li><li>정말 똑똑한 사람은 다른 사람의 힘을 빌려 자신의 일을 처리한다.</li></ul><h4 id="행동-4"><a href="#행동-4" class="headerlink" title="행동"></a>행동</h4><ul><li>책상 정리하기</li><li>잡무는 과감하게 덜어내기</li><li>아이젠하워 원칙 이용하기</li></ul><hr><h3 id="6-효과적으로-업무-효율을-높이는-시간관리-방법"><a href="#6-효과적으로-업무-효율을-높이는-시간관리-방법" class="headerlink" title="6. 효과적으로 업무 효율을 높이는 시간관리 방법"></a>6. 효과적으로 업무 효율을 높이는 시간관리 방법</h3><h4 id="시간을-효율적으로-이용하는-사람들은-자투리-시간도-잘-활용한다"><a href="#시간을-효율적으로-이용하는-사람들은-자투리-시간도-잘-활용한다" class="headerlink" title="시간을 효율적으로 이용하는 사람들은 자투리 시간도 잘 활용한다."></a>시간을 효율적으로 이용하는 사람들은 자투리 시간도 잘 활용한다.</h4><ul><li>회의조차도 효율이 중요하다.</li><li>인터넷을 이용해 많은 정보를 활용하지만 많은 시간을 잃는다.</li></ul><h4 id="행동-5"><a href="#행동-5" class="headerlink" title="행동"></a>행동</h4><ul><li>자투리 시간 활용하기</li><li>언제나 업무에 효율을 찾아보기</li></ul><hr><h3 id="7-업무와-일상생활의-균형-맞추기"><a href="#7-업무와-일상생활의-균형-맞추기" class="headerlink" title="7. 업무와 일상생활의 균형 맞추기"></a>7. 업무와 일상생활의 균형 맞추기</h3><h4 id="직장-생활로-인해-당신의-가정생활이-망가지고-있는가"><a href="#직장-생활로-인해-당신의-가정생활이-망가지고-있는가" class="headerlink" title="직장 생활로 인해 당신의 가정생활이 망가지고 있는가?"></a>직장 생활로 인해 당신의 가정생활이 망가지고 있는가?</h4><ul><li>업무태도는 잠재력을 올려줄 수 있다.</li><li>일하는 게 행복한 워커홀릭은 더욱 더 주의를 해야한다.</li></ul><h4 id="행동-6"><a href="#행동-6" class="headerlink" title="행동"></a>행동</h4><ul><li>업무와 휴식을 적절히 분배하여 컨디션 유지하기</li><li>수면과 감정 컨트롤에 항상 신경 쓰기</li></ul><hr><h2 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h2><p>하버드와의 연관성이 느껴지지 않아 실망이었지만<br>애초에 하버드가 아닌 <code>시간</code>이 관심사였기에 부담은 없었다.</p><p>결과적으로 업무에 대한 효율과 규칙<br>그리고 매우 정확한 목표를 수립해야 시간관리를 할 수 있다고 느꼈고</p><p>책 내용 대부분에 거부감 없이 동의하며 술술 읽을 수 있었다.<br>케이스별 스토리 사례들은 크게 와닿지 않았지만 그냥 이렇구나 정도로는 읽을만했다.</p><blockquote><p>시간을 지키는 방법도 결국은 실천이다.</p></blockquote><hr><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>나쁘지는 않았지만 조금 애매한 책이다.</p><p>옳은 말말 구구절절 모으고 그럭저럭 괜찮은 사례와 실천법을 정리했다.</p><p>또한 타이틀에 하버드 네이밍을 사용할 자격이 있는 책일까 고민하게 만든다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;벨로퍼트님의 리액트를 다루는 기술&lt;/p&gt;</summary>
    
    
    
    <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
    <category term="self-help" scheme="https://devjang.github.io/categories/book/self-help/"/>
    
    
    <category term="시간관리" scheme="https://devjang.github.io/tags/%EC%8B%9C%EA%B0%84%EA%B4%80%EB%A6%AC/"/>
    
  </entry>
  
  <entry>
    <title>리액트를 다루는 기술</title>
    <link href="https://devjang.github.io/2019/11/20/2019-11-20-technique-react-book/"/>
    <id>https://devjang.github.io/2019/11/20/2019-11-20-technique-react-book/</id>
    <published>2019-11-19T15:00:00.000Z</published>
    <updated>2020-08-18T14:12:21.027Z</updated>
    
    <content type="html"><![CDATA[<p>벨로퍼트님의 리액트를 다루는 기술</p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 길벗<br>저자 : 김민준 (벨로퍼트)<br>출간 : 2019-08-31<br>페이지 : 908<br>ISBN : 9791160508796<br>가격 : 42,000원</p></blockquote><ul><li>자세한 정보<br>: <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=15372757">https://book.naver.com/bookdb/book_detail.nhn?bid=15372757</a><br>: <a href="https://www.gilbut.co.kr/book/view?bookcode=BN002496">https://www.gilbut.co.kr/book/view?bookcode=BN002496</a></li></ul><hr><h2 id="시작하며"><a href="#시작하며" class="headerlink" title="시작하며"></a>시작하며</h2><p>국내에서 리액트를 공부한다면 한번쯤은 들어보게되는 스타 강사 김민준(벨로퍼트)님의 책을 운좋게 수령하여 리뷰하게 되었다.<br><strong>(그것도 무려 개정판!)</strong></p><p>사실 이전에 개정판을 지인에게 빌려 급한대로 읽은 적이 있었는데<br>읽고 보니 이건 개정판 수준이 아니라 무려 <code>확장판</code>이 아닐까 싶을정도로 내용이 더 많아졌다.</p><hr><h2 id="확장판-같은-개정판"><a href="#확장판-같은-개정판" class="headerlink" title="확장판 같은 개정판"></a>확장판 같은 개정판</h2><ol><li><code>분량 증가</code>: <strong>688P</strong> =&gt; <strong>908P</strong> (가격도..)</li><li><code>내용 추가</code>: Hooks API, Context API, Redux Saga, Immer, JWT.. 등등</li></ol><p>이외에도 실습 예제 개선이 이루어졌다고 하는데 사실 큰 차이는 느끼지 못했다.<br>오히려 책 소개에 나오는 개정판 추가된 내용에 명시되지 않은 것들 중 추가된게 꽤 많았다.</p><hr><h2 id="친절함"><a href="#친절함" class="headerlink" title="친절함"></a>친절함</h2><p>독자에게 얼마나 많은 내용을 알려주고 싶은지 그 욕심이 숨겨지지 않는 책이다.</p><h4 id="1-100-풀컬러"><a href="#1-100-풀컬러" class="headerlink" title="1. 100% 풀컬러"></a>1. 100% 풀컬러</h4><p><img src="https://images.velog.io/post-images/devjang/f6966b20-0b9f-11ea-8adb-eda8f00f0a46/20191120224559.jpg" alt="20191120_224559.jpg"></p><h4 id="2-Flow-정의"><a href="#2-Flow-정의" class="headerlink" title="2. Flow 정의"></a>2. Flow 정의</h4><p><img src="https://images.velog.io/post-images/devjang/0798d1b0-0ba0-11ea-8adb-eda8f00f0a46/20191120224957.jpg" alt="20191120_224957.jpg"></p><h4 id="3-소스-코드-컬러-하이라이팅"><a href="#3-소스-코드-컬러-하이라이팅" class="headerlink" title="3. 소스 코드 컬러 하이라이팅"></a>3. 소스 코드 컬러 하이라이팅</h4><p><img src="https://images.velog.io/post-images/devjang/1d2cce50-0ba0-11ea-8894-f13628639e9c/20191120224806.jpg" alt="20191120_224806.jpg"></p><h4 id="4-도식화"><a href="#4-도식화" class="headerlink" title="4. 도식화"></a>4. 도식화</h4><p><img src="https://images.velog.io/post-images/devjang/85b2ec70-0ba0-11ea-8894-f13628639e9c/20191120231637.jpg" alt="20191120_231637.jpg"></p><p>엄청난 친절함에 독자들을 위해 얼마나 노력을 했는지 책장을 넘기면서 피부로 느낄 수 있었다.</p><p><code>코드 하이라이팅</code>과 <code>100% 풀 컬러</code>를 넘어서 매 챕터마다 <code>Flow 정의</code>와 <code>도식화</code>가 빠지지 않는다.</p><hr><h2 id="풍부한-예제와-사이드-프로젝트"><a href="#풍부한-예제와-사이드-프로젝트" class="headerlink" title="풍부한 예제와 사이드 프로젝트"></a>풍부한 예제와 사이드 프로젝트</h2><p>새로운 개념과 새로운 챕터에 들어갈때마다 <strong>이해를 돕는 예제를 진행</strong>하고<br><strong>중간 중간 구현</strong>을 통한 사이드 프로젝트를 진행한다.</p><blockquote><p>이론 및 개념 &lt;=&gt; 사용법 &lt;=&gt; 예제 &lt;=&gt; 구현 (사이드 프로젝트)</p></blockquote><p>구현이 아닌 사이드 프로젝트라고 설명한 이유는 구현을 넘어서 책을 톨해 <code>웹 앱을 만들어 나가기</code>때문이다.</p><p>그냥 따라치는 타이핑 수준의 공부 방법으로는<br>도움이 되지 않겠지만 한장 한장 꼼곰히 공부하면서 따라하다보면 큰 도움이 될 것 같다.</p><hr><h2 id="리액트를-넘어서"><a href="#리액트를-넘어서" class="headerlink" title="리액트를 넘어서"></a>리액트를 넘어서</h2><p>단순히 <code>리액트</code>를 넘어서 <code>리액트 생태계</code>까지 습득할 수 있고<br>리액트 생태계를 넘어서 <code>프론트엔드 개발 생태계</code> 영역에 많은 것을 배울 수 있다.<br>그리고 프론트엔드 개발 영역을 넘어서도 <code>웹</code>과 <code>간단한 백엔드</code> 개발도 경험할 수 있다.</p><hr><h2 id="아쉬운-점"><a href="#아쉬운-점" class="headerlink" title="아쉬운 점"></a>아쉬운 점</h2><ol><li>소개와는 다르게 초보 혹은 <code>입문 수준의 실력자라면 읽기 힘들 것</code> 같다는 느낌을 받았다.</li><li>이후에도 <code>개정판</code>이 또 나올게 분명해보일정도로 리액트의 변화가 예상되는 부분이 있다.</li></ol><hr><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>100점 만점에 100점을 주고 싶은 책이다.<br>분량이 굉장히 많아 주어진 리뷰 기간에 책을 다 읽지는 못했지만<br>아예 개인 시간을 다 비우고서라도 책을 끝까지 읽고 싶을 정도로 근질거린다.</p><p>한때 이미 출간일이 많이 지난 리액트 번역서와 많지 않은 자료들을 보며<br>힘든 나날을 보냈던 시절이 있었는데</p><p>이제는 <strong>이재승님의 실전 리액트 프로그래밍</strong> 이나<br>지금 리뷰를 작성하는 <strong>리액트를 다루는 기술</strong>을 보며 국내 개발자분들이 해외 번역서 부럽지 않은 훌륭한 책을 써주셔서 너무 감사하다는 생각이 들었다.</p><p><strong>이 서평은 출판사 길벗을 통해 제공받은 서적을 토대로 작성된 리뷰입니다.</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;벨로퍼트님의 리액트를 다루는 기술&lt;/p&gt;</summary>
    
    
    
    <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
    <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
    
    <category term="react" scheme="https://devjang.github.io/tags/react/"/>
    
    <category term="velopert" scheme="https://devjang.github.io/tags/velopert/"/>
    
  </entry>
  
  <entry>
    <title>나는 LINE 개발자입니다</title>
    <link href="https://devjang.github.io/2019/10/13/2019-10-13-line-developer/"/>
    <id>https://devjang.github.io/2019/10/13/2019-10-13-line-developer/</id>
    <published>2019-10-12T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.863Z</updated>
    
    <content type="html"><![CDATA[<p>라인의 개발 고수 12인의 도전과 기회, 성장의 개발 라이프</p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 한빛미디어<br>저자 : 강윤신, 김영환, 김재석, 김정엽, 김택주, 노승헌, 박민우, 배권한, 이서연, 이승진, 이홍규, 하태호<br>역자 서환수<br>출간 : 2019-09-02<br>페이지 : 252<br>ISBN : 9791162242162<br>가격 : 16,000원</p></blockquote><ul><li>자세한 정보<br>: <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=15372183">http://book.naver.com/bookdb/book_detail.nhn?bid=15372183</a><br>: <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B3137155711">http://www.hanbit.co.kr/store/books/look.php?p_code=B3137155711</a></li></ul><h2 id="뻔해-보였지만-뻔하지-않은-이야기"><a href="#뻔해-보였지만-뻔하지-않은-이야기" class="headerlink" title="뻔해 보였지만 뻔하지 않은 이야기"></a>뻔해 보였지만 뻔하지 않은 이야기</h2><p>사실 이전에 출간되던 위키북스의 <code>NHN은 이렇게 한다 시리즈</code>의 시작이 아닐까 생각이 들었다.</p><p>또한 다양한 글로벌 혹은 국내 유명 기업들이 사내의 개발 문화 알리기 위해 앞다투어<br>노력 중이고</p><p>그중에서 <strong>LINE</strong> 또한 많은 노력을 하고 있다는 것을 알기에<br>뭔가 뻔한 내용은 아닐까<br>생각도 들었지만 <code>얇은 페이지수 에 흥미롭게 읽히기 시작</code>하였다.</p><h2 id="소속은-같지만-전혀-다른-12명의-개발자"><a href="#소속은-같지만-전혀-다른-12명의-개발자" class="headerlink" title="소속은 같지만 전혀 다른 12명의 개발자"></a>소속은 같지만 전혀 다른 12명의 개발자</h2><p>LINE에서 일하는 개발자들의 다양한 이야기와 성장과정 그리고<br>LINE에서의 기회를 도전과 성장으로 이뤄낸 스토리를 담고 있었다.</p><p>백엔드 개발자, 오픈 소스 매니저, 테크 에반젤리스트, 블록체인 서비스, 보안 엔지니어 등등 다<code>양한 직군의 개발자</code><br>그리고 주니어부터 CTO 급까지 <code>다양한 연차</code>에 개발자들의 이야기를 이 얇은 페이지에 핵심만 재미있게 녹여냈다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>LINE 개발자라는 타이틀이 있기에 LINE이 추구하는 지향점이나 문화가 언급되지 않을 수는 없다.<br>하지만 LINE 타이틀이 무색할 정도로 전혀 부담 없이 가볍게 읽을 수 있었으며</p><p>오히려 <code>LINE보다는 다양한 개발자들의 스토리에 초점</code>이 맞춰져있다보니<br>12인의 개발자들이 <strong>어떻게 성장해왔고 어떻게 일하고 있는지</strong> 체감할 수 있었다.</p><blockquote><p>이미 충분히 성공한 혹은 충분히 유명한 네임드 개발자들의 성장 스토리와 조언만 읽어보다가<br>아직 필드에서 현재 진행 중인 다양한 직군과 연차의 개발 라이프를 겪어본다는 점,<br>다양한 도메인과 직군 그리고 연차까지 엮어내기가 쉽지 않은데 이런 얇은 책 한권 으로 가볍게 접할 수 있어 매우 인상 깊게 읽을 수 있었다.</p></blockquote><p><strong>이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;라인의 개발 고수 12인의 도전과 기회, 성장의 개발 라이프&lt;/p&gt;</summary>
    
    
    
    <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
    <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
    
    <category term="LINE" scheme="https://devjang.github.io/tags/LINE/"/>
    
  </entry>
  
  <entry>
    <title>개발자의 공부하기</title>
    <link href="https://devjang.github.io/2019/08/25/2019-08-25-learning-developer/"/>
    <id>https://devjang.github.io/2019/08/25/2019-08-25-learning-developer/</id>
    <published>2019-08-24T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.862Z</updated>
    
    <content type="html"><![CDATA[<p>두고두고 읽기 위해 요약하는 개발자의 공부하는 방법</p><a id="more"></a><p>이 글은 <a href="https://youtu.be/4JPGeahzE7M">코드스피츠 S68 강의</a> 중 나온 <a href="http://www.bsidesoft.com/">비사이드소프트</a> <a href="https://www.facebook.com/hika00">Hika Maeng</a>님의 조언 일부<code>(00~25분)</code>를 요약하고 정리한 내용입니다.</p><hr><h1 id="1-개발을-잘하지-못하는-이유"><a href="#1-개발을-잘하지-못하는-이유" class="headerlink" title="1. 개발을 잘하지 못하는 이유"></a>1. 개발을 잘하지 못하는 이유</h1><ul><li>공부에 충분한 시간을 투자하지 않고 구글링을 통한 Copy &amp; Paste 경력만 쌓는다.<ul><li>2년.. 3년.. 5년을 공부해도 <code>Copy &amp; Paste를 통한 얕은 코드 밖에 작성하지 못한다.</code></li><li>절대 높은 연봉의 개발자가 될 수 없다.</li></ul></li><li>어려운 컴퓨터 학문<ul><li>뒤늦게 탄생했지만 가장 <strong>빠르게 발전</strong>하고 있다.</li><li><strong>생활 속에</strong> 굉장히 밀접한 관련을 가지고 있다.</li></ul></li></ul><h1 id="2-공학도와-비공학도의-이해도와-러닝-커브의-차이"><a href="#2-공학도와-비공학도의-이해도와-러닝-커브의-차이" class="headerlink" title="2. 공학도와 비공학도의 이해도와 러닝 커브의 차이"></a>2. 공학도와 비공학도의 이해도와 러닝 커브의 차이</h1><ul><li>어려운 학문임에도 불구하고 할 게 없어서 입문하는 경우가 많다<ul><li>때문에 마음속에서 개발을 얕보고 있는 경우가 많다.</li></ul></li><li>비전공 IT 입문자는 대부분 문과생<ul><li><strong>범위 위주 학습에 익숙</strong>하여 공부하는 스타일을 바꾸지 못한다.</li><li><code>수포자가 되는 이유</code>와 비슷하다.</li><li>이제 와서 수학을 공부하려고 하니 <strong>기초부터</strong> 다시 해야 한다.</li><li>다른 과목은 범위만 공부하면 되는데 수학은 <strong>중학 수학부터</strong> 다시 해야 한다.</li></ul></li></ul><h1 id="3-유혹과-꾐"><a href="#3-유혹과-꾐" class="headerlink" title="3. 유혹과 꾐"></a>3. 유혹과 꾐</h1><ul><li>처음부터 공부에 <strong>단축 길은 없다.</strong></li><li>눈에 보이며 따라 하기 쉬운 교육 컨텐츠만 찾는다.<br><code>예) 1시간 만에 XX 앱만들기, 한달 만에 배우는 XXX, 3개월 만에 XXX 개발자로...</code> <ul><li>평생 따라 하기만 하게 된다.</li><li>따라쳐서 만들어봤자 어차피 내 것은 아니다.</li></ul></li></ul><h1 id="4-완벽히-이해하고-넘어가자"><a href="#4-완벽히-이해하고-넘어가자" class="headerlink" title="4. 완벽히 이해하고 넘어가자."></a>4. 완벽히 이해하고 넘어가자.</h1><ul><li>1장을 이해하고 2장으로 2장을 이해하고 3장으로 넘어가야 한다.<br>예) A가 B이고 B가 C이기 때문에 A가 C이다.<ul><li><strong>완벽히 이해될 때까지 넘어가서는 안된다</strong>.<ul><li>함수를 공부할 때는 변수를 <strong>잊고</strong> 객체를 공부할 때는 함수를 <strong>잊는다.</strong></li></ul></li><li>Copy &amp; Paste가 아닌 <code>머릿속에 있는 것을 꺼내는 지식 체계를 갖춰야 한다.</code><ul><li><strong>계속해서 바닥 수준의 낮은 공부만</strong> 하게 되고 수준 높은 공부를 할 수가 없다.</li></ul></li></ul></li></ul><h1 id="5-IT를-컴퓨터라는-어려운-학문임을-인지하여-태도를-바꾸자"><a href="#5-IT를-컴퓨터라는-어려운-학문임을-인지하여-태도를-바꾸자" class="headerlink" title="5. IT를 컴퓨터라는 어려운 학문임을 인지하여 태도를 바꾸자"></a>5. IT를 컴퓨터라는 어려운 학문임을 인지하여 태도를 바꾸자</h1><ul><li><strong>어렵다</strong> 그래서 더 노력해야 한다.</li><li>일과 휴식의 분리는 어렵다. <code>많은 시간을 개발 공부에 쏟아야 한다.</code><br>(워라밸 챙기다 공부할 시간 놓치지 말자)</li><li>적은 시간으로 개발자가 될 수 있는 <strong>얕은 학문이 아닌 깊은 학문</strong>이다.</li><li><strong>공부할 것은 매일 같이 쏟아지기 때문에</strong> 이를 체계적으로 학습해야 한다.</li></ul><h1 id="6-컴퓨터-과학-기초부터-차근차근-체계적으로-공부해나가자"><a href="#6-컴퓨터-과학-기초부터-차근차근-체계적으로-공부해나가자" class="headerlink" title="6. 컴퓨터 과학 기초부터 차근차근 체계적으로 공부해나가자"></a>6. 컴퓨터 과학 기초부터 차근차근 체계적으로 공부해나가자</h1><ul><li>동작 원리를 파악해야 한다</li><li>하다보면 <code>언젠가 깨우치겠지 하다가는 몇 년이 되어도 깨우칠 수 없다.</code></li></ul><h1 id="7-책의-모든-문장과-단어를-이해할-때까지-그-책은-읽은-것이-아니다"><a href="#7-책의-모든-문장과-단어를-이해할-때까지-그-책은-읽은-것이-아니다" class="headerlink" title="7. 책의 모든 문장과 단어를 이해할 때까지 그 책은 읽은 것이 아니다."></a>7. 책의 모든 문장과 단어를 이해할 때까지 그 책은 읽은 것이 아니다.</h1><ul><li>절대 넘어가지 말고 <strong>단어 하나하나 이해하자</strong><ul><li>넘어가서 되는 것은 하나도 없다.</li><li><strong>다 알아야지만 이해</strong>한 것이다.</li></ul></li><li>입구는 중요지 않다 한 우물을 제대로 파자<ul><li><code>한 책을 10번 보는 것이 여러 가지 책을 읽는 것보다 낫다.</code></li><li>이것저것 <strong>얕게 파봐야 아무 소용 없다.</strong></li><li>하나의 책이라도 모두 이해해가면서 완독하자</li><li>1층에서 2층으로 지식 체계를 쌓아올릴 때 여러 방이 아닌 하나의 방에서만 쌓아올라가면 된다.</li></ul></li></ul><h1 id="8-세계-최고의-장인-기술사-가-되자고-생각해보자"><a href="#8-세계-최고의-장인-기술사-가-되자고-생각해보자" class="headerlink" title="8. 세계 최고의 장인(기술사)가 되자고 생각해보자"></a>8. 세계 최고의 장인(기술사)가 되자고 생각해보자</h1><ul><li>하루 8시간 일해서 이 방대한 학문의 훌륭한 개발자가 될 수 없다.</li><li>진지하고 꾸준하게 많은 시간 투자를 하자</li><li>주변의 <code>훌륭한 동료들은 이미 나보다 많은 시간을 투자한 사람들</code>이다.</li></ul><h1 id="9-괴롭고-힘들어도-자신의-길을-구축하자"><a href="#9-괴롭고-힘들어도-자신의-길을-구축하자" class="headerlink" title="9. 괴롭고 힘들어도 자신의 길을 구축하자"></a>9. 괴롭고 힘들어도 자신의 길을 구축하자</h1><ul><li>2층에 사는 개발자가 되자</li><li>회사에서 불러주기 때문에 <strong>회사를 골라갈 수 있다</strong>.</li><li>자리를 만들어줘서라도 훌륭한 개발자를 데려온다.</li><li>끊임없이 <code>좋은 조건으로 회사를 돌아다니는 플레이어가 된다</code>.</li><li>스타트업이 망하는 이유는 이런 핵심 개발자를 구하지 못해 서비스를 구현할 수 없기 때문이다.</li></ul><h1 id="10-희망과-지옥"><a href="#10-희망과-지옥" class="headerlink" title="10. 희망과 지옥"></a>10. 희망과 지옥</h1><ul><li>지옥<ul><li>막대한 시간과 투자</li><li>체계성 있는 교육</li><li>많은 인내심</li></ul></li><li>희망<ul><li>사회적으로 유니크하다.</li><li>수요가 많다.</li></ul></li></ul><hr><blockquote><p>CSS 렌더링 방식에 대한 이해를 위해 코드스피츠 강의를 보다가 동기부여를 얻게 되어 요약하게 되었고 지금 얻은 이 동기부여를 잃지 않도록 노력해야겠다.</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;두고두고 읽기 위해 요약하는 개발자의 공부하는 방법&lt;/p&gt;</summary>
    
    
    
    <category term="column" scheme="https://devjang.github.io/categories/column/"/>
    
    
    <category term="개발자" scheme="https://devjang.github.io/tags/%EA%B0%9C%EB%B0%9C%EC%9E%90/"/>
    
    <category term="공부" scheme="https://devjang.github.io/tags/%EA%B3%B5%EB%B6%80/"/>
    
  </entry>
  
  <entry>
    <title>프로그래밍 면접 이렇게 준비한다</title>
    <link href="https://devjang.github.io/2019/08/09/2019-08-09-programming-interviews-exposed/"/>
    <id>https://devjang.github.io/2019/08/09/2019-08-09-programming-interviews-exposed/</id>
    <published>2019-08-08T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.862Z</updated>
    
    <content type="html"><![CDATA[<p>면접에서 코딩하라면 깜짝 놀라는 당신을 위한 책!</p><p>면접을 앞둔 프로그래머를 위한 종합 안내서</p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 한빛미디어<br>원제 : Programming Interviews Exposed<br>저자 : 존 몽건, 노아 킨들러, 에릭 기게리<br>역자 : 서환수<br>출간 : 2019-07-04<br>페이지 : 568<br>ISBN : 9791162241998<br>가격 : 28,000원</p></blockquote><ul><li>자세한 정보<br>: <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=15064639">http://book.naver.com/bookdb/book_detail.nhn?bid=15064639</a><br>: <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B6503680425">http://www.hanbit.co.kr/store/books/look.php?p_code=B6503680425</a></li></ul><h2 id="면접-백과-사전"><a href="#면접-백과-사전" class="headerlink" title="면접 백과 사전"></a>면접 백과 사전</h2><p><img src="https://images-na.ssl-images-amazon.com/images/I/51ibkhoIdBL._SX394_BO1,204,203,200_.jpg"></p><ul><li>원제 표지 디자인</li></ul><p>개발자는 다른 직종과는 다르게 정형화시킬 수 없을 정도로 다양한 면접 프로세스를 거칠 수 있다.</p><p>전화 면접, 화상 면접, 코딩 테스트, 알고리즘 시험, 과제 등을 통해 <code>실력을 검증하는 자리</code>는 기본이며<br>협업을 위한 <code>인성 면접</code> 그리고 최종적으로는 처우 협의를 위한 <code>연봉 협상</code>까지 해야 한다.</p><p>실력이 출중한 개발자라면 가만히 있어도 여기저기서 입사 제의를 하겠지만<br>이직에 대한 확고한 의지를 가진 개발자라면 <code>충분한 전략을 가지고 준비를 해야 한다.</code></p><p>단 한 달이라도 <strong>어떻게 준비를 하느냐에 따라 나의 몸값과 미래가 달라질 수 있기 때문이다.</strong></p><p>이 책에서는 <strong>프로필 정리 =&gt; 회사 선택 =&gt; 면접 =&gt; 연봉 협상까지</strong> 아주 상세하게 구술되어 있다.</p><p>게다가 해외 서적이지만 국내 IT 환경에도 충분히 적용되는 내용이 많다.</p><blockquote><p><strong>CHAPTER 2 입사 지원 절차 59 Page</strong><br>연봉 인상을 요구한다는 이유로 인해 손해 볼 일은 거의 없다.<br>하지만 그 대가는 크다.<br>30분간의 전화 통화로 연봉을 300만원정도 올릴 수 있다면<br>한 시간 동안 600만원을 벌어들인 셈이 된다.  </p></blockquote><h2 id="문제를-해결하는-능력"><a href="#문제를-해결하는-능력" class="headerlink" title="문제를 해결하는 능력"></a>문제를 해결하는 능력</h2><p>문제 해결 능력은 개발자에게 가장 중요한 덕목 중 하나이다.</p><p>면접을 준비하는 과정도 중요하지만 개발자의 실력을 검증하는 데 있어서 자료구조와 알고리즘은 피할 수가 없다.</p><p>저자는 심층적으로 도움이 되는 예제들을 제공하며 단순히 문제를 해결하는 것에 그치지 않고<br><code>문제에 접근하고 해결하는 모든 과정에 있어 큰 가르침을 준다.</code></p><h2 id="개발자에게-길을-제시하는-종합-로드맵"><a href="#개발자에게-길을-제시하는-종합-로드맵" class="headerlink" title="개발자에게 길을 제시하는 종합 로드맵"></a>개발자에게 길을 제시하는 종합 로드맵</h2><ul><li>구직 방법에 대한 방법 및 팁</li><li>자료 구조</li><li>알고리즘</li><li>컴퓨터 공학</li><li>OOP 및 디자인 패턴</li><li>기초 수학 및 연산</li></ul><p>이 책의 전반적인 목차를 정리해보면 위와 같다.</p><p>겉보기에는 정말 구직만을 위한 책 같지만 그렇지 않다.<br>한 개발자가 자아성찰을 하고 면접을 보며 회사를 고르고 입사를 하기까지<br>큰 로드맵을 제시하고 있다.</p><p>한마디로 자아성찰부터 면접 그리고 입사까지 다루고 있으니 <code>독자를 처음부터 끝까지 책임지고 케어해주는 느낌을 받는다.</code></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>국내에서는 4판까지 출시됐을 정도로 베스트셀러를 넘어선 스테디셀러라고 생각하고 있었지만<br>언젠가 이직할 때 꼭 봐야지라고 생각하면서<br>이직을 준비할 때 단 한 번도 구입해보지 못한 책이였다.<br><code>(회사의 지원으로 사기에는 어려운 책의 네이밍)</code></p><ul><li>현업 개발자들이 궁금한 전공자</li><li>신입 취업을 준비하는 예비 개발자</li><li>이직을 생각하거나 준비하는 개발자</li><li>알고리즘과 자료구조에 취약한 개발자</li><li>실력은 뛰어나지만 자신을 어필하는 방법이 부족한 개발자</li><li>연봉 협상이라는 것을 전혀 모르는 개발자</li><li>IT에 관심이 많은 리크루터 및 헤드헌터</li><li>개발자 채용을 위해 면접 프로세스를 만들어야 하는 다양한 직무의 실무자</li></ul><p>등등 굳이 이직을 생각하지 않아도 <code>모든 개발자들에게 큰 양분</code>이 될 수 있는 책이라 앞으로도 많은 개발자들이 접하고 읽어봤으면 좋겠다.</p><p><strong>이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;면접에서 코딩하라면 깜짝 놀라는 당신을 위한 책!&lt;/p&gt;
&lt;p&gt;면접을 앞둔 프로그래머를 위한 종합 안내서&lt;/p&gt;</summary>
    
    
    
    <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
    <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
    <category term="computer science" scheme="https://devjang.github.io/categories/book/programming/computer-science/"/>
    
    
    <category term="알고리즘" scheme="https://devjang.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="프로그래밍 면접" scheme="https://devjang.github.io/tags/%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D-%EB%A9%B4%EC%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>게임으로 익히는 코딩 알고리즘</title>
    <link href="https://devjang.github.io/2019/07/12/2019-07-12-coding-algorithm-with-game/"/>
    <id>https://devjang.github.io/2019/07/12/2019-07-12-coding-algorithm-with-game/</id>
    <published>2019-07-11T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.862Z</updated>
    
    <content type="html"><![CDATA[<p>취업, 이직, 승진 준비생들을 위한 알고리즘 기본 + 코딩 테스트 트레이닝 북</p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 한빛미디어<br>저자 : 김영기<br>출간 : 2019-05-06<br>페이지 : 320<br>ISBN : 9791162241615<br>가격 : 22,000원</p></blockquote><ul><li>자세한 정보<br>: <a href="http://book.naver.com/bookdb/book_detail.nhn?bid=14841097">http://book.naver.com/bookdb/book_detail.nhn?bid=14841097</a><br>: <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B7463314905">http://www.hanbit.co.kr/store/books/look.php?p_code=B7463314905</a></li></ul><h2 id="특이한-알고리즘-서적"><a href="#특이한-알고리즘-서적" class="headerlink" title="특이한 알고리즘 서적"></a>특이한 알고리즘 서적</h2><ol><li>Interview</li><li>자료구조와 함께 배우는 알고리즘</li><li>Training</li><li>대회</li><li>알고리즘을 통한 인문학</li><li>알고리즘 입문</li></ol><p>보통 알고리즘 서적은 이정도로 분류해볼 수 있다.</p><p>물론 더욱더 다양한 종류가 있지만 저 정도의 카테고리를 가진 알고리즘 서적만 해도 책장을 가득 매울 수 있다.</p><p>근데 이 책은 참 특이한 구성의 스타일을 가지고 있다.</p><p><img src="https://2.bp.blogspot.com/-b07Ayh6_oO8/XSrBryomjeI/AAAAAAAALy8/ETFcV54lJn8Bv-ctdupaGzofB5i9xnE8wCK4BGAYYCw/s640/2019-07-14-14.45.22.png"></p><p>일단 저자부터 설명하자면 다양한 게임 개발 이력을 지녔으며 <a href="https://www.codingame.com/">코딩게임</a>에서 <a href="http://www.codingame.com/profile/bdb85491a5398d37cc726929a30b95231303091">상위 랭크</a>를 기록할 정도로 알고리즘을 즐기는 게임 개발자이다.</p><p>또한 책에 나오는 다양한 <strong>문제 및 리소스도 <a href="https://www.codingame.com/">코딩게임</a>을 베이스</strong>로 하고 있어 저자가 코딩게임 운영자는 아닌가 착각을 했다.</p><p>또한 <strong>기본 언어는 파이썬</strong>을 채택하고 있어 요즘 파이썬을 통해 입문하는 개발자들이 많아 이를 의식한 것인가 추측을 해보게 된다.</p><h2 id="의외로-탄탄한-구성"><a href="#의외로-탄탄한-구성" class="headerlink" title="의외로 탄탄한 구성"></a>의외로 탄탄한 구성</h2><p>게임이라는 소재를 통한 알고리즘 문제와 파이썬 기반의 코드 설명</p><p>이것만으로도 특이했고 다른 알고리즘 책과 달리 얇고 소박한 두께라 그저 문제 풀이로만 가득한 책 일거라 추측했지만 절대 그런 책이 아니었다.</p><p>체계적인 구성을 통해 알고리즘 풀이를 돕고 있다.</p><ol><li>문제 설명</li><li>풀이 방법 소개</li><li>필요한 알고리즘 방법 제시</li><li>수도 코드 설명</li><li>추가 설명 및 다른 풀이법 소개</li></ol><p>알고리즘의 개념 설명이 주 핵심이거나 문제가 뺵빽하거나 보통은 이런 책들이 대부분이지만<br>마치 과외 선생님이 함께하는 것처럼 <code>문제 분석부터 풀이 그리고 정리까지 함께 해준다.</code></p><p>마지막으로는 현업에 계신 게임 개발자분의 인터뷰를 통해 알고리즘의 중요성을 설명하고 있다.</p><h2 id="놓치지-않은-개념"><a href="#놓치지-않은-개념" class="headerlink" title="놓치지 않은 개념"></a>놓치지 않은 개념</h2><p>문제 분석과 풀이 그리고 문제를 풀면서 등장하는 해결 방법을 통해 알고리즘의 중요 개념들을 꽤나 많이 짚고 넘어간다.</p><p>깊게 개념을 파고드는 수준은 아니지만 <code>큐, 스택, 해시 맵, 이진 탐색, 탐욕 알고리즘, 재귀 등등 다양한 알고리즘을 놓치지 않고 담고 있다.</code></p><p>또한 알고리즘을 표현하는데 가장 중요한 <strong>수도코드</strong>를 거의 필수적으로 담고 있으며<br><code>다른 언어로 포팅하며 문제를 풀 수 있을 정도로 간략하게 표현</code>되어 있어<br>파이썬이 아닌 다른 언어의 개발자들도 보는데 무리 없이 느껴진다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>참 애매한 포지션을 가진 알고리즘 서적이다.</p><p>기본적인 <strong>프로그래밍을 가능한 학생이나 초급 개발자를 대상으로 한다고 명시되어있는 책</strong>이지만<br>입문용은 아니며 알고리즘의 개념이 빽빽한 것도 아니고 다양한 문제를 담고 있는 두꺼운 책도 아니라 시험 및 대회용으로 적합하지도 않다.</p><p>이런 단점에도 불구하고 <strong>책이 꽤나 재미있다.</strong></p><p>마치 알고리즘을 가르쳐주는 과외 선생님이 처음부터 끝까지 함께하는 것 같다.<br><code>특이한 구성이지만 탄탄하며 문제를 분석하는데 소홀하지 않는다.</code></p><p>특히나 한빛미디어 답게 <strong>풀 컬러로 높은 가독성을 자랑하고 있어 문제와 코드 그리고 그래프도 보기 좋게 잘 읽힌다</strong>.</p><p><em>이 한 권으로 알고리즘의 개념을 습득하거나 취업을 준비하고 시험을 보기에는 어려움이 있다.</em></p><p>하지만 알고리즘을 공부할 때 문제가 풀리지 않아 힘들고 지겨울 때가 많고 두께부터 압도적인 부담감을 느낄 수 있는 책이 많다</p><p>이럴 때 이 책으로 공부하면 <code>알고리즘에 재미있게 접근하면서도 레벨업을 할 수 있는 계기를 가질 수 있을 것 같다</code>.</p><p><strong>이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;취업, 이직, 승진 준비생들을 위한 알고리즘 기본 + 코딩 테스트 트레이닝 북&lt;/p&gt;</summary>
    
    
    
    <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
    <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
    <category term="computer science" scheme="https://devjang.github.io/categories/book/programming/computer-science/"/>
    
    
    <category term="알고리즘" scheme="https://devjang.github.io/tags/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
    <category term="게임으로 익히는 코딩 알고리즘" scheme="https://devjang.github.io/tags/%EA%B2%8C%EC%9E%84%EC%9C%BC%EB%A1%9C-%EC%9D%B5%ED%9E%88%EB%8A%94-%EC%BD%94%EB%94%A9-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98/"/>
    
  </entry>
  
  <entry>
    <title>GDG FRONT-ENDGAME 참관 후기</title>
    <link href="https://devjang.github.io/2019/06/24/2019-06-24-gdg-front-endgame/"/>
    <id>https://devjang.github.io/2019/06/24/2019-06-24-gdg-front-endgame/</id>
    <published>2019-06-23T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.862Z</updated>
    
    <content type="html"><![CDATA[<p>FRONT-ENDGAME: 여러분의 프런트엔드를 구할 어벤져스가 찾아옵니다<br>at 구글 스타트업 캠퍼스(구글 캠퍼스 서울)</p><p>컨퍼런스 참관기</p><a id="more"></a><hr><h2 id="컨퍼런스-참가-전"><a href="#컨퍼런스-참가-전" class="headerlink" title="컨퍼런스 참가 전"></a>컨퍼런스 참가 전</h2><p><img src="https://cf.festa.io/img/2019-6-10/612c6469-3b48-4ed1-876a-3fcf89daee30.png"></p><ol><li>조금은 오그라드는 컨퍼런스 패러디 커버</li><li>FE 관련 컨퍼런스에 항상 등장하시는 능력자분들</li></ol><p>이 두 가지 부분이 우려되어 참가를 고민하였지만 FE <strong>끝. 장(Endgame)</strong> 컨텍스트에 이끌려 티켓팅을 하게 되었다.</p><hr><p><img src="https://4.bp.blogspot.com/-SspDzr4L7MQ/XRCQ_wQidVI/AAAAAAAALXc/Jg6ZhwQcbZ05zFyUmiKWCRX8gQtMKsHbACK4BGAYYCw/s640/1.jpeg"></p><ul><li>170명 가량의 많은 참가자분들</li></ul><p><img src="https://3.bp.blogspot.com/-QtgRcdbjtkY/XRCRZwYRFdI/AAAAAAAALXs/SPv69Ck3eJAphjz_2ON1wDZt8Nv7r77NwCK4BGAYYCw/s640/2.jpeg"><br><img src="https://1.bp.blogspot.com/-QEYMGjbTrl8/XRCRZ_M7BUI/AAAAAAAALXw/3u2xHSJ3prAibroXMEc3yNw-yylqfDjhACK4BGAYYCw/s640/3.jpeg"></p><ul><li>언제나 반가운 스티커들</li></ul><p><img src="https://3.bp.blogspot.com/-f5xOu-ajaNQ/XRCR4Xlz23I/AAAAAAAALYI/V547q9WV1x0SIx7twkqqRna1UWjzNFzPgCK4BGAYYCw/s640/4.jpeg"></p><ul><li>타이트하고도 긴 세션으로 구성되어있다.</li></ul><hr><h2 id="여러분이-앵귤러를-안해봤다면-살아갈-이유가-하나-더-있는-겁니다"><a href="#여러분이-앵귤러를-안해봤다면-살아갈-이유가-하나-더-있는-겁니다" class="headerlink" title="여러분이 앵귤러를 안해봤다면 살아갈 이유가 하나 더 있는 겁니다."></a>여러분이 앵귤러를 안해봤다면 살아갈 이유가 하나 더 있는 겁니다.</h2><h4 id="천민호-PUBG-amp-Festa"><a href="#천민호-PUBG-amp-Festa" class="headerlink" title="천민호, PUBG &amp; Festa"></a>천민호, PUBG &amp; Festa</h4><p>유난히 Angular에 대한 발표가 많은 컨퍼런스로 신기하다 생각했는데 시작부터 Angular 세션이었다.</p><p><a href="https://festa.io/events/1">React Seoul 2017</a>에서 <a href="https://youtu.be/1o1CqzTtt2o">Decorator + HOC + React = Fantastic!!</a>을 발표해주신 천민호님이 연사자로 등장</p><p><img src="https://upload.wikimedia.org/wikipedia/ko/c/cd/Doraemon.PNG"></p><ul><li>Angular를 도라에몽과 같다고 비유</li></ul><p>PUBG의 프론트엔드 리드 개발자로 일하면서 Angular를 처음 접하게 되었고<br><strong>처음에는 거부감이 들었지만 점점 도라에몽과 같은 Angular에 빠지게 되었다는 내용</strong>이었다.</p><p><img src="https://img1.daumcdn.net/thumb/R720x0/?fname=http://t1.daumcdn.net/liveboard/appstory/c0dcddb2173b42b897e92c696c864561.jpg"></p><ul><li>이 화면이 Angular로 제작된 웹 페이지라고한다.</li></ul><p>웹프레임워크 선택에 대한 의문점은 결국 <code>앱의 상태와 화면을 동기화하는 과제</code>에서 나오는데<br>이에 대한 설명을 정말 명쾌하고 잘 정리하게 풀어주었다.</p><h3 id="Angular-vs-React"><a href="#Angular-vs-React" class="headerlink" title="Angular vs React"></a>Angular vs React</h3><table><thead><tr><th></th><th>Angular</th><th>React</th></tr></thead><tbody><tr><td>관계</td><td>철저한 사육</td><td>철저한 방목</td></tr><tr><td>시점</td><td>우리를 사용자로 본다</td><td>우리를 개발자로 본다</td></tr><tr><td>동기화 방법</td><td>내가 알아서 해줄게</td><td>개발자가 명시적으로 동기화 setState()</td></tr></tbody></table><h4 id="React"><a href="#React" class="headerlink" title="- React"></a>- React</h4><ol><li>다양한 선택권</li><li>선택의 연속</li><li>개발자가 모든 것을 알아서 해야 한다.</li><li>Best Practice를 판단하기 어렵다.</li></ol><h3 id="Angular의-단점"><a href="#Angular의-단점" class="headerlink" title="Angular의 단점"></a>Angular의 단점</h3><ol><li>높은 진입 장벽 (하지만 점점 낮아지는 러닝 커브)<ul><li>Directive</li><li>TypeScript</li><li>Template</li><li>RxJS</li></ul></li><li>많은 제약사항<ul><li><strong>개발자를 사용자로</strong> 느끼게 해준다.</li><li>활동 반경을 제한한다.</li></ul></li></ol><h3 id="Angular의-장점"><a href="#Angular의-장점" class="headerlink" title="Angular의 장점"></a>Angular의 장점</h3><ol><li>잘못된 길로 빠지지 않는다.  <ul><li>결국 <strong>Angular is Best Practice</strong></li></ul></li><li>TypeScript<ul><li>팀 &amp; 앱의 규모가 커질수록 큰 도움</li></ul></li><li>RxJS<ul><li><strong>비동기 스트림계의 lodash</strong></li><li>어차피 사용할 수 밖에 없다.</li><li>파편화되는 코드를 정리할 수 있다.</li></ul></li><li>DI (Dependency Injection)<ul><li>동일한 인터페이스 동일한 함수에 적용</li><li>DI을 통해 <strong>분기문을 줄일 수 있다.</strong></li></ul></li></ol><h3 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h3><ul><li><strong>Q:</strong> 게임에 웹을 도입했을 때 이점?  </li></ul><p><strong>A:</strong> 사용자에게 서비스를 빠르게 서빙할 수 있다.</p><ul><li><strong>Q:</strong> Angular 최적화에 한계가 존재하는지  </li></ul><p><strong>A:</strong> 결국 React와 비슷하다.</p><ul><li><strong>Q:</strong> 소규모 프로젝트에서의 이점은 없는지  </li></ul><p><strong>A:</strong> Angular를 배워볼 수 있다.</p><ul><li><strong>Q:</strong> DI 시스템만의 차별화된 점이 있는지 (HOC와 비슷한가)  </li></ul><p><strong>A:</strong> HOC와 DI는 비슷해 보이지만 비교 대상이 아니다.</p><ul><li><strong>Q:</strong> DI로 개선 효과는?  </li></ul><p><strong>A:</strong> 분기문이 없어졌다.</p><h3 id="느낀-점"><a href="#느낀-점" class="headerlink" title="느낀 점"></a>느낀 점</h3><blockquote><p>국내에서의 Angular 시장은 이제 Vue에 점유율이 밀릴 정도로 작아지는<br>이 시점에서 천민호님의 발표는 매우 호응이 좋았다.<br><code>간결하게 잘 정돈된 내용과 적절한 비유는 오그라드는 발표 제목조차 청중을 납득시켰다</code>.</p></blockquote><hr><h2 id="UX빼면-시체-프론트엔드"><a href="#UX빼면-시체-프론트엔드" class="headerlink" title="UX빼면 시체, 프론트엔드"></a>UX빼면 시체, 프론트엔드</h2><h4 id="한재엽-프론트엔드개발그룹-FEDG-a-k-a-FEConf"><a href="#한재엽-프론트엔드개발그룹-FEDG-a-k-a-FEConf" class="headerlink" title="한재엽, 프론트엔드개발그룹 (FEDG a.k.a FEConf)"></a>한재엽, 프론트엔드개발그룹 (FEDG a.k.a FEConf)</h4><ul><li>Blog: <a href="https://jbee.io/">https://jbee.io/</a></li><li>Github: <a href="https://github.com/JaeYeopHan">https://github.com/JaeYeopHan</a></li></ul><p><img src="https://1.bp.blogspot.com/-lt4tynljPjs/XRC0yR1xNwI/AAAAAAAALYY/PfPh4VXl02E1RsyCpbR1gGbx0yqDarvaQCK4BGAYYCw/s640/10.jpeg"></p><p>웹 프론트엔드 전반적으로 다양한 활동을 하고 계신 한재엽님의 발표였고 UX란 무엇인가를 넘은 내용이었다.</p><p>발표자료: <a href="https://speakerdeck.com/jaeyeophan/uxbbaemyeon-sice-peureonteuendeu">https://speakerdeck.com/jaeyeophan/uxbbaemyeon-sice-peureonteuendeu</a></p><p>단순한 문서만 주고받던 WEB이 30주년이 되었다.<br>과연 지금은 어떻게 변화하였는가</p><h3 id="기술의-발전"><a href="#기술의-발전" class="headerlink" title="기술의 발전"></a>기술의 발전</h3><ol><li>SSR Page Serving</li><li>ES3 / Ajax (1999)</li><li>Gmail (2004)</li><li>jQuery (2006)</li><li>AngularJS (2010)</li><li>React (2013)</li><li>ECMAScript 2015+</li><li>Babel</li><li>MEAN Stack =&gt; JAM Stack</li></ol><h3 id="Why-기술이-발전되는-이유"><a href="#Why-기술이-발전되는-이유" class="headerlink" title="(Why)? 기술이 발전되는 이유"></a>(Why)? 기술이 발전되는 이유</h3><ul><li>Rich Client</li></ul><ol><li>정보량 과다</li><li>모바일 대응</li><li>복잡해진 화면</li><li>문서를 뛰어넘은 매체</li></ol><ul><li>사용자의 환경을 개선</li></ul><ol><li>작은 화면에 복잡한 UI</li><li>페이지 리프레시</li><li>페이징</li><li>빠르고 풍부하고 우아한 웹</li></ol><h3 id="Not-only-UX-Design"><a href="#Not-only-UX-Design" class="headerlink" title="Not only UX Design"></a>Not only UX Design</h3><p><img src="https://cdn-images-1.medium.com/max/1800/1*yH7W8KEcD09-VUORdhg46Q.png"></p><ul><li><a href="https://uxplanet.org/ux-engineers-what-we-are-2b0c4d10b3a6">https://uxplanet.org/ux-engineers-what-we-are-2b0c4d10b3a6</a></li></ul><p>프론트엔드 개발자라면 당연히 챙겨야할 덕목인 4가지의 UX 개선 사항을 뽑아주었다.</p><h4 id="성능-최적화"><a href="#성능-최적화" class="headerlink" title="성능 최적화"></a>성능 최적화</h4><ol><li>초기로딩</li><li>빠른 동작</li><li>부드러운 애니메이션</li></ol><h4 id="예상-가능한-동작"><a href="#예상-가능한-동작" class="headerlink" title="예상 가능한 동작"></a>예상 가능한 동작</h4><ol><li>스크롤 복원</li><li>dimd 닫힘</li><li>손에 쉡게 들어오는 인터렉션</li><li>예상 가능한 인터렉션</li></ol><h4 id="SEO-SMO"><a href="#SEO-SMO" class="headerlink" title="SEO / SMO"></a>SEO / SMO</h4><ol><li>검색 엔진 최적화</li><li>소셜 미디어 공유 최적화</li><li>어디까지 공유 가능해야 하는가</li></ol><h4 id="측정과-개선"><a href="#측정과-개선" class="headerlink" title="측정과 개선"></a>측정과 개선</h4><ol><li>트래킹</li><li>A / B TEST</li><li>GA</li></ol><h3 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h3><ul><li>프론트엔드의 본질은 UX</li><li>UX 디자이너와의 긴밀한 협업<ul><li>디자이너의 1px, 100ms 의 소중함</li></ul></li></ul><table><thead><tr><th>라이브러리 / 플랫폼 개발자</th><th>프로덕트 개발자</th></tr></thead><tbody><tr><td>Performance</td><td>UX</td></tr><tr><td>Documentation</td><td>Maintentance</td></tr></tbody></table><h3 id="느낀-점-1"><a href="#느낀-점-1" class="headerlink" title="느낀 점"></a>느낀 점</h3><blockquote><p><strong>수많은 프론트엔드 개발자들을 반성시키는</strong> 발표가 아닐까 싶다.<br>전반적인 WEB 탄생에서부터 시작하여 왜 사용자 관점에서의 UX가 중요한지<br>프론트엔드 개발자는 이 상황에서 무엇을 해야 하는지에 대해 적절한 경험담과 사례 그리고 방향을 제시해줬다.</p></blockquote><hr><h2 id="프론트엔드-개발에-FRP-Functional-Reactive-Programming-녹여보기"><a href="#프론트엔드-개발에-FRP-Functional-Reactive-Programming-녹여보기" class="headerlink" title="프론트엔드 개발에 FRP(Functional Reactive Programming) 녹여보기"></a>프론트엔드 개발에 FRP(Functional Reactive Programming) 녹여보기</h2><h4 id="서재원-푸른중학교"><a href="#서재원-푸른중학교" class="headerlink" title="서재원, 푸른중학교"></a>서재원, 푸른중학교</h4><ul><li>Blog: <a href="http://environmentset.github.io/">http://environmentset.github.io</a></li><li>Github: <a href="https://github.com/environmentset">https://github.com/environmentset</a></li><li>Interview: <a href="https://www.imaso.co.kr/archives/3668">https://www.imaso.co.kr/archives/3668</a></li></ul><p><img src="https://1.bp.blogspot.com/-kRwGHdITjLc/XRC1S9af6hI/AAAAAAAALYk/8AVDm_p4NSsHd5vn-arIXa6YY2lOk0FqQCK4BGAYYCw/s640/7.jpeg"></p><p>이제는 널리 알려진 프론트엔드계의 이강인 그리고 유망주 서재원님의 FRP 발표였다.</p><p><a href="https://codesandbox.io/s/frp-platground-8k6yx">예제코드</a></p><h4 id="프로그래밍-패러다임"><a href="#프로그래밍-패러다임" class="headerlink" title="프로그래밍 패러다임"></a>프로그래밍 패러다임</h4><p>추상화 =&gt; 함수를 만든다.</p><h4 id="명령형-vs-선언형"><a href="#명령형-vs-선언형" class="headerlink" title="명령형 vs 선언형"></a>명령형 vs 선언형</h4><p>선언적인 프로그래밍은 가변성과 부수효과를 사라지게 만들어준다.</p><h4 id="Reactive-Programming"><a href="#Reactive-Programming" class="headerlink" title="Reactive Programming"></a>Reactive Programming</h4><ol><li>흐름을 정의한다</li><li>낮은 결합도</li><li>Observer</li><li>이벤트</li></ol><h4 id="FRP-Functional-Reactive-Programming"><a href="#FRP-Functional-Reactive-Programming" class="headerlink" title="FRP(Functional Reactive Programming)"></a>FRP(Functional Reactive Programming)</h4><p>함수형과 반응형의 만남은 결국<br><strong>코드 재사용성을 높이며 결합도는 낮춰준다.</strong></p><h4 id="Functional-배우기"><a href="#Functional-배우기" class="headerlink" title="Functional 배우기"></a>Functional 배우기</h4><ol><li>Monad</li><li>부수효과</li><li>참조 투명성</li><li>순수 함수</li><li>HOF</li></ol><h4 id="Reactive-배우기"><a href="#Reactive-배우기" class="headerlink" title="Reactive 배우기"></a>Reactive 배우기</h4><ol><li>Observable</li><li>lifesaver</li></ol><h4 id="FRP-배우기"><a href="#FRP-배우기" class="headerlink" title="FRP 배우기"></a>FRP 배우기</h4><ol><li>Sequence</li><li>Observable (stream)</li><li>Operation</li><li>Marble Diagram</li><li>map</li><li>filter</li><li>scan</li><li>merge</li><li>withLatestFrom</li></ol><h3 id="느낀-점-2"><a href="#느낀-점-2" class="headerlink" title="느낀 점"></a>느낀 점</h3><blockquote><p>점점 발표 스킬이 늘고 키도 커지고 있는게 느껴지는 서재원님의 발표였다.<br><strong>발표를 하는 것 자체만으로도 많은 개발자들에게 귀감</strong>을 주었지만<br>FRP에 대한 소개와 특징으로 끝난 것 같아 매우 아쉬웠다.</p></blockquote><hr><h2 id="문과생의-커리어-프런트엔드로-refactoring하기"><a href="#문과생의-커리어-프런트엔드로-refactoring하기" class="headerlink" title="문과생의 커리어 프런트엔드로 refactoring하기"></a>문과생의 커리어 프런트엔드로 refactoring하기</h2><h4 id="한근택-ODK-Media"><a href="#한근택-ODK-Media" class="headerlink" title="한근택, ODK Media"></a>한근택, ODK Media</h4><p><img src="https://2.bp.blogspot.com/-U12xlH6AKIk/XRC1_xRUnHI/AAAAAAAALYw/r8TSjdQFiBctw4enJGVzAerAiMKBfcQ9gCK4BGAYYCw/s640/6.jpeg"></p><p>발표 전에는 같은 비전공자로써 큰 기대는 없없지만<br>컨퍼런스를 함께한 스터디원분께서 한근택님 발표가 분명 재미가 있을 거라며<br>큰 기대를 주었고 정말 기대 이상의 동기부여와 재미를 준 발표였다.</p><h4 id="비전공자에서-인프라-엔지니어로"><a href="#비전공자에서-인프라-엔지니어로" class="headerlink" title="비전공자에서 인프라 엔지니어로"></a>비전공자에서 인프라 엔지니어로</h4><p>노량진 고시생이자 게임 중독에 걸린 시절 자신의 학과에 대한 의문까지 더하게 되어 더더욱 공부를 하지 않고 허송세월을 보내고 있었다.</p><p>이때 <strong>전 여친(aka 와이프)님의 제안으로 Java 교육 수강</strong>을 시작하게 되었는데</p><p>결국 보안 교육을 통해 결국 보안 관제 담당자로 취직하게 되었다.</p><p><strong>보안 분석, IDC 세팅, 각종 인프라 엔지니어 업무와 장애 대응</strong>으로 지치게 되었고 재미를 느끼고는 하였지만<br>결국 잦은 서버 업무로 이직을 결심하게 되었다.</p><h4 id="AWS-인스턴스-200대-점검"><a href="#AWS-인스턴스-200대-점검" class="headerlink" title="AWS 인스턴스 200대 점검"></a>AWS 인스턴스 200대 점검</h4><p>취업하자마자 주어진 명령이었고 굉장히 많은 시도를 해보다가<br>Python CLI로 해결하게되었다.<br>이 마저도 불편하여 직접 Web에 대시보드를 개발하여 해결을 하였다.</p><p>하지만 이런 능동적인 개발 이후 팀장의 잦은 요구로 이직을 결심하게 되었다.</p><h4 id="개발-공부-재시작"><a href="#개발-공부-재시작" class="headerlink" title="개발 공부 재시작"></a>개발 공부 재시작</h4><p>취업을 위한 공부를 시작하였다 (HTML &amp; CSS는 극혐 그 자체)</p><p>그 중 네트워크는 인프라 엔지니어 시절 업무를 통해 몸으로 느끼며 학습하게 되어 따로 공부할 필요가 없었다.</p><p><code>자료구조</code>는 언어에 신경 쓰지 않고 책을 구매 후 원하는 언어로 포팅하며 공부하였고<br><code>알고리즘</code>은 흔한 패턴을 공부하다가 나중에는 트릭도 찾아 공부하게 되었다.</p><h4 id="면접-amp-취직"><a href="#면접-amp-취직" class="headerlink" title="면접 &amp; 취직"></a>면접 &amp; 취직</h4><p>면접과 과제를 통해서도 성장할 수 있어 고마움을 느끼게 되었지만 점점 지치게 되었다.</p><p>결국<br>하루에 7시간 면대면 면접과 매일 매일 문제를 보내는 어떠한 곳에 <strong>백엔드 개발자</strong>로 취직을 하게 되었다.</p><h4 id="커피-한잔과-Front-end"><a href="#커피-한잔과-Front-end" class="headerlink" title="커피 한잔과 Front end"></a>커피 한잔과 Front end</h4><p>그러던 어느 날 <code>커피 한 잔에 팔려 React를 배우라는 지시</code>를 받았고 동료 쥬니어 개발자와 협업하여 서비스를 출시하게 되었다.</p><p>나름 프론트엔드 개발자로 한층 성장하는 계기가 되었다.</p><h4 id="사수-A-이야기"><a href="#사수-A-이야기" class="headerlink" title="사수 A 이야기"></a>사수 A 이야기</h4><p>알마라는 사수 A 개발자분이 입사하게 되었고 매일 매일 <code>코드 리뷰</code>를 받으며 <strong>살해의 위협</strong>을 받았다고 한다.</p><p>인정을 받다가도 잦은 실수를 하며 굉장히 많이 혼나게 되었고 결국 <code>정신없이 혼나다 성장한 자신을 바라보게 되었다</code>.   </p><p>어느샌가 사수 A는 떠나게 되었지만 큰 배움을 받게 되었다.</p><h4 id="프론트엔드-리드-개발자"><a href="#프론트엔드-리드-개발자" class="headerlink" title="프론트엔드 리드 개발자"></a>프론트엔드 리드 개발자</h4><p>그 와중에 프론트엔드 기반이 전혀 없는 어떠한 회사에서 <strong>프론트엔드 환경을 리드</strong>를 하게 되었다.</p><p><strong>사수 A</strong> 개발자님에게 배운 것을 토대로 코드 리뷰를 도입하고 많은 노력을 하였지만</p><p>리더가 된 이후 살이 빠질 정도로 <strong>굉장한 스트레스</strong> 받았고<br><code>리더라는 이유로 의지할 곳이 없어</code> 외로운 리더가 되었다.</p><h4 id="사수-B-이야기"><a href="#사수-B-이야기" class="headerlink" title="사수 B 이야기"></a>사수 B 이야기</h4><p>이전 회사에서 다양한 배움과 도움을 주었던 사수 B님의 제안으로 현 회사로 이직하게 되었고 함께 토이 프로젝트를 진행한다.</p><p><strong>토이 프로젝트에 최대한 신기술을 자유롭게 도입</strong>해보고<br>그 <strong>경험과 노하우를 통해 회사의 코드에</strong> 녹여보고<br>실제 필드에서 얻은 <strong>피드백을 또 다시 토이 프로젝트에 적용</strong>하는 식으로 학습을 하였다.</p><h4 id="결론-1"><a href="#결론-1" class="headerlink" title="결론"></a>결론</h4><p>좋은 사람들과 일하며 많은 것을 배우자</p><h3 id="느낀-점-3"><a href="#느낀-점-3" class="headerlink" title="느낀 점"></a>느낀 점</h3><blockquote><p>정말 말을 잘하는 개발자셨다.<br><strong>개발자가 아닌 일반인이 봐도 재미있을 발표</strong>였고<br>이쁘게 잘 정돈된 발표 자료는 아니었지만 <strong>필요할 때마다 등장하는 짤</strong>들은 발표를 꿀잼으로 만들어줬다.<br>좋은 와이프, 좋은 동료 (때로는 무서운)들을 만나 훌륭한 프론트엔드 개발자가 된다는 내용이지만<br>그 과정 속에 한근택님이 얼마나 많은 노력을 했는지와 실행력은 정말 큰 동기부여가 되었다.</p></blockquote><hr><h2 id="프론트엔드-개발-끝장내기-endgame-feat-Angular"><a href="#프론트엔드-개발-끝장내기-endgame-feat-Angular" class="headerlink" title="프론트엔드 개발 끝장내기(endgame) feat. Angular"></a>프론트엔드 개발 끝장내기(endgame) feat. Angular</h2><h4 id="나석주-비바리퍼블리카"><a href="#나석주-비바리퍼블리카" class="headerlink" title="나석주, 비바리퍼블리카"></a>나석주, 비바리퍼블리카</h4><p>이미 이전 발표 중 천민호님의 Angular 발표와 내용이 겹치게되어 어떤 차별점이 있을까를 기대하게 되었다.</p><h3 id="Angular의-특징"><a href="#Angular의-특징" class="headerlink" title="Angular의 특징"></a>Angular의 특징</h3><ul><li>Template Binding</li><li>Component</li><li>HTML attribute 와 DOM Property 비교</li></ul><h3 id="Change-Detection"><a href="#Change-Detection" class="headerlink" title="Change Detection"></a>Change Detection</h3><ul><li>데이터의 변경을 감지하여 View 반영하는 Angular의 메커니즘</li><li>단방향 강제화</li></ul><h3 id="Zone"><a href="#Zone" class="headerlink" title="Zone"></a>Zone</h3><ul><li>JavaScript VM 실행 컨텍스트</li><li>DOM 이벤트 추적</li></ul><h3 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h3><ul><li>고립된 컴포넌트들의 상태를 공유</li><li>인스턴스 활용</li></ul><h3 id="결론-2"><a href="#결론-2" class="headerlink" title="결론"></a>결론</h3><p>이 밖에도 <code>Promise</code>의 Pull &amp; Push와 <code>RxJS</code>를 설명하는 등<br>직접 Angular를 사용하며 느꼈던 특징을 공유하는 자리였다.</p><h3 id="느낀-점-4"><a href="#느낀-점-4" class="headerlink" title="느낀 점"></a>느낀 점</h3><blockquote><p>이전 발표와 겹치는 내용이 많아 이전 내용과 비교를 하거나 살을 보태는 방식의 진행이 아쉬웠고<br>이쯤 되니 GDG와의 약속으로 Angular에 대한 세션이 많았던 게 아닐까 우스꽝스러운 생각을 해보게 된다.</p></blockquote><hr><h2 id="프로그래머로의-배움"><a href="#프로그래머로의-배움" class="headerlink" title="프로그래머로의 배움"></a>프로그래머로의 배움</h2><h4 id="안희종-비바리퍼블리카"><a href="#안희종-비바리퍼블리카" class="headerlink" title="안희종, 비바리퍼블리카"></a>안희종, 비바리퍼블리카</h4><ul><li>Blog: <a href="https://ahnheejong.name/about">https://ahnheejong.name/about</a></li><li>Github: <a href="https://github.com/heejongahn">https://github.com/heejongahn</a></li></ul><p><img src="https://4.bp.blogspot.com/-oHAsLuliTP4/XRC-KsDH91I/AAAAAAAALY8/v2zh-oQdMmIsVtoJV4b45UBChdUzL9TigCK4BGAYYCw/s640/5.jpeg"></p><p>프론트엔드계의 브루스 배너 안희종님의 발표는 처음 보지만 그동안 워낙 훌륭한 아티클들을 다수 작성해주셔서 감명 깊게 본 적이 있다.</p><p>원래의 발표 제목은 <strong>프로그래머로서의 성장을 도왔던 태도들</strong>이지만</p><p><strong>프로그래머로의 배움</strong>으로 변경하였다고 한다.</p><p>발표자료: <a href="https://www.slideshare.net/HeejongAhn/ss-152627139">https://www.slideshare.net/HeejongAhn/ss-152627139</a></p><h3 id="무엇을-배울까-변하는-세상-속에서"><a href="#무엇을-배울까-변하는-세상-속에서" class="headerlink" title="무엇을 배울까: 변하는 세상 속에서"></a>무엇을 배울까: 변하는 세상 속에서</h3><ul><li>코드를 안 짜는 방법 &gt; 적게 짜는 코드</li><li>Rich App 생태계에 대처하는 JavaScript</li><li><code>요구사항을 가정하는 방법</code><ul><li>올바른 가정을 세운다 =&gt; 많이 해본다 =&gt; 회고를 한다.</li></ul></li><li><code>왜?</code> 무엇이?<ul><li>모든 사항에 의문을 가져본다.</li><li>고민해볼 만한 가치가 있다.</li></ul></li><li>겸허함<ul><li>글과 말을 정돈을 잘할수록 코드를 짜는 데 도움이 된다.</li></ul></li><li>세상이 변해도 변하지 않는 것을 공부하자</li></ul><h3 id="어떻게-배울까-이론과-실습-사이의-핑퐁-사람들은-틀린-말을-한다"><a href="#어떻게-배울까-이론과-실습-사이의-핑퐁-사람들은-틀린-말을-한다" class="headerlink" title="어떻게 배울까: 이론과 실습 사이의 핑퐁, 사람들은 틀린 말을 한다"></a>어떻게 배울까: 이론과 실습 사이의 핑퐁, 사람들은 틀린 말을 한다</h3><ul><li>균형을 찾는 법</li></ul><table><thead><tr><th></th><th>A 유형</th><th>B 유형</th></tr></thead><tbody><tr><td>방법</td><td>문서만 읽음</td><td>기본 문법만 습득 =&gt; 바로 코딩</td></tr><tr><td>결과</td><td>실제 코딩은 막힌다</td><td>시행 착오로 인한 시간 낭비 많음</td></tr></tbody></table><ul><li>A &amp; B 를 핑퐁한다</li><li>MVP<ul><li><strong>짧은 주기의 반복을 통해 만들면서 배운다</strong></li></ul></li><li>급할수록 돌아가자<ul><li>쉽게 풀어진 학습 리소스<ol><li>재해석을 하자</li><li>진실로부터 멀어질 수 있다.</li></ol></li><li>근원에 깊이 파고들자<ol><li>어려워도 하다 보면 익숙해진다.</li><li>생각하고 습관을 잡기 위해 노력하자</li></ol></li></ul></li><li>사람보다는 기계를 믿고 하는 일을 기계에 맡기자</li></ul><h3 id="왜-배울까-나는-작지만-내가-할-수-있는-일이-있다"><a href="#왜-배울까-나는-작지만-내가-할-수-있는-일이-있다" class="headerlink" title="왜 배울까: 나는 작지만 내가 할 수 있는 일이 있다"></a>왜 배울까: 나는 작지만 내가 할 수 있는 일이 있다</h3><ul><li>다양한 리소스에 압도를 당하는 느낌<ul><li>초조함과 모든 것을 <strong>다 배워야 한다는 생각이 들지만 결국 불가능하다</strong></li></ul></li><li>외부의 정보량보다는 나의 <strong>에너지와 시간의 문제</strong></li><li>Action Plan<ul><li>열정적이고 훌륭한 동료를 확보하자</li><li>내가 그런 사람이 되기 위해 노력하자</li></ul></li><li>배움을 주는 문턱은 생각보다 높지 않다.<ul><li>다양한 길이 열린다.</li></ul></li></ul><h3 id="느낀-점-5"><a href="#느낀-점-5" class="headerlink" title="느낀 점"></a>느낀 점</h3><blockquote><p>안희종님의 발표나 자료를 접하게 될 때는 <code>지식의 빈익빈 부익부</code>를 느끼게 된다.<br>자기 주도 학습을 하는 데 있어서도 사람마다 <strong>접근 방식과 Action Plan</strong>에 큰 차이를 보인다.<br>결국 이번 세션도 역시나 큰 반성과 깊은 뉘우침을 받게 되었다.</p></blockquote><hr><h2 id="리액트-꽃길만-걷기"><a href="#리액트-꽃길만-걷기" class="headerlink" title="리액트 꽃길만 걷기"></a>리액트 꽃길만 걷기</h2><h4 id="김민준-Velopert-라프텔"><a href="#김민준-Velopert-라프텔" class="headerlink" title="김민준(Velopert), 라프텔"></a>김민준(Velopert), 라프텔</h4><ul><li>Blog: <a href="https://velopert.com/">https://velopert.com</a></li><li>Github: <a href="https://github.com/velopert">https://github.com/velopert</a></li><li>Facebook: <a href="https://facebook.com/velopert">https://facebook.com/velopert</a></li><li>Youtube: <a href="https://www.youtube.com/channel/UCmMgRlN-3GKQ_CH7cOtLdvg">https://www.youtube.com/channel/UCmMgRlN-3GKQ_CH7cOtLdvg</a></li><li>Book: <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=13799583">https://book.naver.com/bookdb/book_detail.nhn?bid=13799583</a></li><li>ETC: <a href="https://velog.io/">https://velog.io</a></li></ul><p>국내 React 홍보대사이자 대표라고 할 수 있는 벨로퍼트님의 세션으로 React를 사용하고 공부하며 겪은 시행착오와 역사를 공유하는 자리였다.</p><p>발표자료: <a href="https://drive.google.com/file/d/18MJDVzre8DYnEx9OITrYZOC_cVUeaSdV/view?usp=sharing">https://drive.google.com/file/d/18MJDVzre8DYnEx9OITrYZOC_cVUeaSdV/view?usp=sharing</a></p><h3 id="전반적인-내용"><a href="#전반적인-내용" class="headerlink" title="전반적인 내용"></a>전반적인 내용</h3><ul><li>고생하지 않고 React를 배우는 길에 대한 고민</li><li>겪었던 실제 어려움</li><li>잘못된 방향들</li><li>배웠던 꿀팁</li><li>온전한 리액트에 대한 이야기</li></ul><h3 id="스타일"><a href="#스타일" class="headerlink" title="스타일"></a>스타일</h3><ul><li><p>전처리기</p><ol><li>sass, less<ul><li>다양한 문법과 재사용 방법</li></ul></li><li>post css<ul><li>전처리기들을 흉내 낼 수 있다.</li></ul></li></ol></li><li><p>디렉토리 구조에 대한 고민</p><ol><li>스타일만 몰아넣기<ul><li>인덱싱 어려움</li><li>컴포넌트화 동기화 어려움</li><li>컴포넌트와 동떨어져 관리 어려움</li><li>마크업 팀이 있다면 도움 될 수도</li></ul></li><li>컴포넌트에 넣어주기<ul><li>무난하고 많이 사용됨</li><li>폴더 및 index.js 만드는 어려운 생산성</li></ul></li></ol></li><li><p>CSS module</p><ul><li>class name 관리 어려움</li></ul></li><li><p>CSS in JS =&gt; Style Components</p><ol><li>안 좋았던 단점이 모두 수정되며 장점이 되고 있다 =&gt; V5</li><li>종착점이 되었다.</li></ol></li><li><p>UI 프레임워크 사용은 지양하자</p><ol><li>절대 필수 요소가 아니다.</li><li>커스터마이징이 어렵고 걷어내기도 어렵다.</li><li>직접 작성하는 것을 어렵다고 생각하지 말자</li></ol></li></ul><h3 id="함수형-컴포넌트"><a href="#함수형-컴포넌트" class="headerlink" title="함수형 컴포넌트"></a>함수형 컴포넌트</h3><p>v16.8 이후 <strong>클래스 컴포넌트에서만 가능했던 것들이 함수형 컴포넌트에서</strong> 가능해졌다.</p><p>다양한 Hooks와 LifeCycle API 흉내내기 그리고 <code>Context API + Hook을 통해 Redu x만큼의 효과</code>를 낼 수가 있다.<br>(단점으로는 미들웨어를 포기해야 할 수 있다.)</p><p>이제 더 이상 클래스 컴포넌트를 사용해야 할 이유가 사라지고 있다.</p><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><h4 id="Redux"><a href="#Redux" class="headerlink" title="Redux"></a>Redux</h4><p>v16.8 버전이 다가온다 해서 <code>굳이 Redux를 걷어낼 이유는 없다.</code></p><p>Redux 상태를 관리하는 데 있어서 항상 큰 고민을 동반하게 된다.</p><p>결론과 정답은 없지만</p><ol><li>스토어에 어떤 상태를 넣어야 할지 고민하고 정의해본다.</li><li>로컬 상태로 할 수 있다면 굳이 스토어에 다 넣지는 말자</li></ol><ul><li>Container &amp; Presentational</li></ul><ol><li>꼭 따라야 할 패턴은 아니다.</li><li>Container 컴포넌트가 굉장히 거대해지는 상황이 많으니 조심하자</li><li>1 Container &lt;=&gt; 1 Presentational 일 이유는 없다.</li></ol><h4 id="Mobx"><a href="#Mobx" class="headerlink" title="Mobx"></a>Mobx</h4><p>Hooks 지원 여부에 따라 사용법이 많이 바뀌고 있으니 새롭게 배우게 된다면 몇 달 후에 배워보자.</p><h3 id="SSR"><a href="#SSR" class="headerlink" title="SSR"></a>SSR</h3><p>결국 서비스를 운영한다면 필수인 부분이다.</p><table><thead><tr><th>Next</th><th>Router</th></tr></thead><tbody><tr><td>생산성이 좋다</td><td>프로젝트 설계를 직접 구현</td></tr><tr><td>모든 걸 다 해준다</td><td>데이터 로딩에 제약 사항이 없다</td></tr><tr><td>제약 사항이 많다</td><td>올바를 이해와 가이드가 필요하다</td></tr></tbody></table><h3 id="기타"><a href="#기타" class="headerlink" title="기타"></a>기타</h3><ol><li>데이터 요청 상태 관리에는 스토어가 도움이 될 수 있다.</li><li>Immutable.js 보다는 <code>immer.js</code></li><li>상태를 너무 깊게 가져가지 말자</li><li>배열 업데이트시 <code>keyed-by-id</code>를 사용하자 (라이브러리도 있다)</li><li>TS, TDD는 고민하지 말고 일단 빠르게 적용하자</li></ol><h3 id="느낀-점-6"><a href="#느낀-점-6" class="headerlink" title="느낀 점"></a>느낀 점</h3><blockquote><p>진겸님의 <code>패스트캠퍼스 100만원짜리 강의라는 말이 와닿을 정도로 굉장히 좋은 발표였다.</code><br>사실 React를 하다 보면 문제가 뭔지도 모르고 이상한 길을 마치 맞다고 착각하는 경우도 있고<br>Best Practice를 찾는 데에만 며칠이 걸릴때도 있다.<br>물론 Velopert님의 요약된 발표가 React 로드맵의 표본 및 정답이라고 할 수는 없다.<br>하지만 Best Practice에 가까운 훌륭한 자료와 정리였다.</p></blockquote><hr><h2 id="Q-amp-A-1"><a href="#Q-amp-A-1" class="headerlink" title="Q &amp; A"></a>Q &amp; A</h2><p><img src="https://2.bp.blogspot.com/-zxciExphqeY/XRC-MhqBn5I/AAAAAAAALZE/3c7SMxcabmsaGCBTlkm6BiwJasWYqKtuACK4BGAYYCw/s640/11.jpeg"></p><h3 id="풀스택에-대하여-어떻게-생각하는지-시간이-들이면-가능한지-장점이-있는지"><a href="#풀스택에-대하여-어떻게-생각하는지-시간이-들이면-가능한지-장점이-있는지" class="headerlink" title="풀스택에 대하여 어떻게 생각하는지? 시간이 들이면 가능한지? 장점이 있는지?"></a>풀스택에 대하여 어떻게 생각하는지? 시간이 들이면 가능한지? 장점이 있는지?</h3><ul><li><p><strong>A:</strong> 서재원</p><ul><li>시간을 들이면 모든 것이 가능하다.</li><li>공부도 그랬다.</li></ul></li><li><p><strong>A:</strong> 나석주</p><ul><li>충분히 가능하다.</li></ul></li><li><p><strong>A:</strong> 안희종</p><ul><li>풀스택이 아니라 가능한지는 모르겠다.</li><li>어떤 한 분야를 깊이 파는 게 필요한 조직도 있고 넓은 분야를 필요로 하는 분야도 있다 본인의 포지션을 정해서 나아가면 된다</li></ul></li><li><p><strong>A:</strong> 진겸</p><ul><li>스타트업을 가면 결국 서버를 어쩔 수 없이 짜는 경우가 있다.</li></ul></li><li><p><strong>A:</strong> 김민준</p><ul><li>풀스택 개발자가 있을 수는 있지만 멋있다고 생각되지는 않는다.</li><li>한 곳에서의 정점보다 두 곳에서의 정점은 어렵다.</li><li>풀스택을 나눠 협업하는 것이 더 멋지다고 생각한다.</li><li>굳이 모두 다 잘할 필요는 없다고 생각한다.</li><li>둘 다 공부는 해도 한곳에 집중하는 것이 더 좋다.</li><li>둘 다 해야 우리가 원하는 것을 얻을 수 있다.</li></ul></li><li><p><strong>A:</strong> 한근택</p><ul><li>제사상에 피자가 올라가도 되는지 급의 논란 질문이다.</li><li>풀스택을 어디까지 볼 것이냐가 중요하다.</li><li>둘 다 해야 우리가 원하는 것을 얻을 수 있다.</li><li>굳이 모두 다 잘할 필요는 없다고 생각한다.</li><li>두 명분의 일을 한 명의 임금으로 해결해야하는 일 같다.</li><li>트렌드가 빠르게 변하는데 양쪽을 모두 따라갈 수 없다.</li></ul></li><li><p><strong>A:</strong> 한재엽</p><ul><li>노 코멘트</li></ul></li></ul><h3 id="프레임워크-리서치시-Angular의-평가가-매우-낮다-어떻게-생각하는지"><a href="#프레임워크-리서치시-Angular의-평가가-매우-낮다-어떻게-생각하는지" class="headerlink" title="프레임워크 리서치시 Angular의 평가가 매우 낮다 어떻게 생각하는지"></a>프레임워크 리서치시 Angular의 평가가 매우 낮다 어떻게 생각하는지</h3><ul><li><p><strong>A:</strong> 나석주</p><ul><li>입문이 어려워서 그런 것 같다.<ul><li>문제 해결이 어려워지게 된다.</li></ul></li></ul></li><li><p><strong>A:</strong> 진겸</p><ul><li>시대를 앞서간 것 같다.</li><li>학습 비용이 리액트에 비해 크다.</li></ul></li></ul><h3 id="안희종님-Fear-of-missing-out-경험과-해결-방법이-궁금해요"><a href="#안희종님-Fear-of-missing-out-경험과-해결-방법이-궁금해요" class="headerlink" title="안희종님 Fear of missing out 경험과 해결 방법이 궁금해요"></a>안희종님 Fear of missing out 경험과 해결 방법이 궁금해요</h3><p><a href="https://www.huffingtonpost.kr/aftertherain/story_b_10809520.html">Fear of missing out</a></p><ul><li><strong>A:</strong> 안희종<ul><li>팔로워를 줄이게 되었다 어차피 좋은 정보는 들어오게 되어있다.</li><li>본인의 능력에 대한 피드백을 빠르게 자주 받아보자</li><li>면접을 보며 부딪히고 피드백을 받아보는 것도 팁이다.</li><li>본인을 평가받아보는 환경에 자신을 던져보자<ul><li>액션 플랜을 짜보자</li></ul></li></ul></li></ul><h3 id="서재원님-개발은-언제-시작하셨나요"><a href="#서재원님-개발은-언제-시작하셨나요" class="headerlink" title="서재원님 개발은 언제 시작하셨나요?"></a>서재원님 개발은 언제 시작하셨나요?</h3><ul><li><strong>A:</strong> 서재원<ul><li>초등학교 5학년 게임을 하다가 시작하게 되었다.</li></ul></li></ul><h3 id="UX-회의시-의견이-불일치할-때-대처-방법"><a href="#UX-회의시-의견이-불일치할-때-대처-방법" class="headerlink" title="UX 회의시 의견이 불일치할 때 대처 방법"></a>UX 회의시 의견이 불일치할 때 대처 방법</h3><ul><li><p><strong>A:</strong> 진겸</p><ul><li>Best Practice는 없다.</li><li>사용자에게 좋은 경험을 제공하는지를 확인하자</li><li>조율이 가능한 경우와 아닌 경우가 있다.</li><li>역량과 상황에 따라 달라질 수 있다.</li><li>최대한 사용자 측 입장에 대해 많이 생각해보자<ul><li>실력 상승이 된다.</li></ul></li></ul></li><li><p><strong>A:</strong> 김민준</p><ul><li>데이터로 분석할 수 있는 UX 면 좋다.</li><li>A/B 테스트 수용</li></ul></li><li><p><strong>A:</strong> 한재엽</p><ul><li>안된다고만 하지 말고 안되는 이유를 생각해보자<ul><li>일정 및 역량</li></ul></li><li>MVP를 도입하여 디자이너와 협의</li></ul></li></ul><h3 id="프론트엔드-전망이-아직도-좋다고-생각이-되나요-보험이-되는-서버-언어를-추천해주세요"><a href="#프론트엔드-전망이-아직도-좋다고-생각이-되나요-보험이-되는-서버-언어를-추천해주세요" class="headerlink" title="프론트엔드 전망이 아직도 좋다고 생각이 되나요? 보험이 되는 서버 언어를 추천해주세요"></a>프론트엔드 전망이 아직도 좋다고 생각이 되나요? 보험이 되는 서버 언어를 추천해주세요</h3><ul><li><p><strong>A:</strong> 김민준</p><ul><li>개발을 잘한다면 전망이 좋다.</li><li>못 따라온다면 프론트엔드에 어울리지 않을 수 있다.</li><li>보험이 되는 공부 방법은 별로 같다.<ul><li>자아 성찰을 하자</li></ul></li><li>어떤 언어를 공부하느냐는 중요하지 않다.<ul><li>개발을 잘 해내는 게 더 중요하다.</li><li>절대 언어가 중요한 게 아니다.</li></ul></li></ul></li><li><p><strong>A:</strong> 나석준</p><ul><li>한 가지 기술만 고집하지 않는 변화에 대응할 수 있는 자세가 필요한 것 같다.</li><li>카멜레온 같은 개발자가 되자</li></ul></li></ul><h3 id="개발-문화에-대한-책-중-인상-깊었던-문구"><a href="#개발-문화에-대한-책-중-인상-깊었던-문구" class="headerlink" title="개발 문화에 대한 책 중 인상 깊었던 문구"></a>개발 문화에 대한 책 중 인상 깊었던 문구</h3><ul><li><p><strong>A:</strong> 한근택</p><ul><li><a href="https://johngrib.github.io/wiki/Boy-Scout-Rule/">보이스카웃 원칙</a><ul><li>들어가서 나올 때는 더 깨끗하게</li><li>남이 짠 코드더라도 정돈을 시키고 나오자</li></ul></li></ul></li><li><p><strong>A:</strong> 한재엽</p><ul><li><a href="https://ko.wikipedia.org/wiki/%EA%B9%A8%EC%A7%84_%EC%9C%A0%EB%A6%AC%EC%B0%BD_%EC%9D%B4%EB%A1%A0">깨진 유리창 법칙</a><ul><li>유리창에 한 군데가 깨지면 전체적인 분위기를 망친다.</li><li>안 쓰는 코드가 있거나 잘못된 주석이 있거나 하나라도 잘못된 것이 있으면 잘못된 프로덕트로 보일 수 있다</li></ul></li></ul></li><li><p><strong>A:</strong> 서재원</p><ul><li><a href="https://lazygyu.net/blog/hype_driven_development">설레발 주도 개발</a><ul><li>신기술을 배우고 습득하여 유행에 따라 적용해보며 삽질하고 욕을 하게 된다.</li><li>뭐가 중요한 것인지 파악해야 한다.</li></ul></li></ul></li><li><p><strong>A:</strong> 진겸</p><ul><li>외주를 하자 일단 질러놓자 어떻게든 하게 되어있다.</li><li>스스로 목표 없이는 잘 안 하게 되어 있다.</li><li>어쩔 수 없는 마감을 만들어버리자</li></ul></li></ul><h3 id="유지보수하기-어렵게-코딩하는-방법이라는-책을-본-적이-있는지"><a href="#유지보수하기-어렵게-코딩하는-방법이라는-책을-본-적이-있는지" class="headerlink" title="유지보수하기 어렵게 코딩하는 방법이라는 책을 본 적이 있는지"></a>유지보수하기 어렵게 코딩하는 방법이라는 책을 본 적이 있는지</h3><p><a href="https://book.naver.com/bookdb/book_detail.nhn?bid=7085402">유지보수하기 어렵게 코딩하는 방법</a></p><ul><li><strong>A:</strong> 한근택<ul><li>제목만 보고 읽지 않았다.</li></ul></li></ul><h3 id="한재엽님-호스팅과-도메인은-무엇을-사용하나요"><a href="#한재엽님-호스팅과-도메인은-무엇을-사용하나요" class="headerlink" title="한재엽님 호스팅과 도메인은 무엇을 사용하나요?"></a>한재엽님 호스팅과 도메인은 무엇을 사용하나요?</h3><ul><li><strong>A:</strong> 한재엽<ul><li>도메인: <a href="https://kr.godaddy.com/">GoDaddy</a></li><li>호스팅: <a href="https://www.netlify.com/">netlify</a></li></ul></li></ul><h3 id="현재-아무런-프레임워크-없이-뭔가-도입해야-하는데-뷰와-리액트-고민이-됩니다"><a href="#현재-아무런-프레임워크-없이-뭔가-도입해야-하는데-뷰와-리액트-고민이-됩니다" class="headerlink" title="현재 아무런 프레임워크 없이 뭔가 도입해야 하는데 뷰와 리액트 고민이 됩니다."></a>현재 아무런 프레임워크 없이 뭔가 도입해야 하는데 뷰와 리액트 고민이 됩니다.</h3><ul><li><p><strong>A:</strong> 한재엽</p><ul><li>훌륭한 강의 및 자료가 많은 리액트를 추천</li><li>생태계가 크다.</li><li>공식 문서가 번역되고 있다.</li></ul></li><li><p><strong>A:</strong> 나석주</p><ul><li>Angular도 번역이 있다.</li></ul></li></ul><h3 id="컴퓨터-전공-중-FE-공부를-한다니-교수님이-그걸-왜-하냐고-혼이-났다-그냥-재밌어서라고-했더니-그건-전공자가-하는-게-아니라고-혼났다-어떻게-대답을-해야-하나"><a href="#컴퓨터-전공-중-FE-공부를-한다니-교수님이-그걸-왜-하냐고-혼이-났다-그냥-재밌어서라고-했더니-그건-전공자가-하는-게-아니라고-혼났다-어떻게-대답을-해야-하나" class="headerlink" title="컴퓨터 전공 중 FE 공부를 한다니 교수님이 그걸 왜 하냐고 혼이 났다. 그냥 재밌어서라고 했더니 그건 전공자가 하는 게 아니라고 혼났다 어떻게 대답을 해야 하나"></a>컴퓨터 전공 중 FE 공부를 한다니 교수님이 그걸 왜 하냐고 혼이 났다. 그냥 재밌어서라고 했더니 그건 전공자가 하는 게 아니라고 혼났다 어떻게 대답을 해야 하나</h3><ul><li><p><strong>A:</strong> 한재엽</p><ul><li>비전공자이지만 어딘가에 생각이 머물러있는 교수님인 것 같다.</li><li>이미 멈춰진 옛날이 FE를 생각하는 것 같다.</li><li>무시를 하는 것도 좋지만 반박을 하자면 재밌어서라는 이유가 크다…..</li></ul></li><li><p><strong>A:</strong> 안희종</p><ul><li>사람들은 틀린다.</li><li>전공자도 많이 하고 있다.</li><li>FE는 많이 복잡해지고 있다.<ul><li>FE 라이브러리나 프레임워크에 적용된 법칙과 구조는 이미 백엔드에도 있는 것들이다 마음에 담아두지 말자</li></ul></li></ul></li></ul><h3 id="비전공자인데-프로그래밍을-배운지-6개월이-되었다-CS-기초가-꼭-필요한지-어떻게-준비하는지"><a href="#비전공자인데-프로그래밍을-배운지-6개월이-되었다-CS-기초가-꼭-필요한지-어떻게-준비하는지" class="headerlink" title="비전공자인데 프로그래밍을 배운지 6개월이 되었다. CS 기초가 꼭 필요한지 어떻게 준비하는지"></a>비전공자인데 프로그래밍을 배운지 6개월이 되었다. CS 기초가 꼭 필요한지 어떻게 준비하는지</h3><ul><li><strong>A:</strong> 한재엽<ul><li>본인 깃헙에 CS 기초 <a href="https://github.com/JaeYeopHan/Interview_Question_for_Beginner">정리 자료</a>가 있다</li><li>깊이 공부한 적은 없고 필요할 때만 공부했다.</li><li>모르는 지식들만 찾아서 공부하게 되었다.</li><li>좋은 자료는 이미 굉장히 많다.</li></ul></li></ul><h3 id="알고리즘-공부가-너무-어렵다-얼마나-활용하고-얼마나-노력하는지"><a href="#알고리즘-공부가-너무-어렵다-얼마나-활용하고-얼마나-노력하는지" class="headerlink" title="알고리즘 공부가 너무 어렵다 얼마나 활용하고 얼마나 노력하는지"></a>알고리즘 공부가 너무 어렵다 얼마나 활용하고 얼마나 노력하는지</h3><ul><li><p><strong>A:</strong> 진겸</p><ul><li>결과적으로는 도움이 되는 부분이다.</li><li>결과에 집착하자</li></ul></li><li><p><strong>A:</strong> 나석주</p><ul><li>프로그램 서빙으로 문제를 해결해나가는 능력이 결국 중요하다.</li></ul></li></ul><hr><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><p><img src="https://4.bp.blogspot.com/-jqhTPbKT5j4/XRC-NaJQK5I/AAAAAAAALZM/SHXPUCsHsv8yj-zEZrQj4k6R2BIInqudwCK4BGAYYCw/s640/9.jpeg"></p><ul><li>전체 사진 출처(<a href="https://github.com/ysm0622">@양성민님</a>)</li></ul><blockquote><p>역대급으로 만족스러웠다.<br>다양한 인사이트와 깊은 반성 그리고 엄청난 동기부여를 받았던 컨퍼런스였다.<br>더 이상 무슨 말이 필요할까</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;FRONT-ENDGAME: 여러분의 프런트엔드를 구할 어벤져스가 찾아옵니다&lt;br&gt;at 구글 스타트업 캠퍼스(구글 캠퍼스 서울)&lt;/p&gt;
&lt;p&gt;컨퍼런스 참관기&lt;/p&gt;</summary>
    
    
    
    <category term="conference" scheme="https://devjang.github.io/categories/conference/"/>
    
    
    <category term="gdg" scheme="https://devjang.github.io/tags/gdg/"/>
    
    <category term="velopert" scheme="https://devjang.github.io/tags/velopert/"/>
    
    <category term="front-endgame" scheme="https://devjang.github.io/tags/front-endgame/"/>
    
    <category term="천민호" scheme="https://devjang.github.io/tags/%EC%B2%9C%EB%AF%BC%ED%98%B8/"/>
    
    <category term="진겸" scheme="https://devjang.github.io/tags/%EC%A7%84%EA%B2%B8/"/>
    
    <category term="한재엽" scheme="https://devjang.github.io/tags/%ED%95%9C%EC%9E%AC%EC%97%BD/"/>
    
    <category term="서재원" scheme="https://devjang.github.io/tags/%EC%84%9C%EC%9E%AC%EC%9B%90/"/>
    
    <category term="나석주" scheme="https://devjang.github.io/tags/%EB%82%98%EC%84%9D%EC%A3%BC/"/>
    
    <category term="한근택" scheme="https://devjang.github.io/tags/%ED%95%9C%EA%B7%BC%ED%83%9D/"/>
    
    <category term="벨로퍼트" scheme="https://devjang.github.io/tags/%EB%B2%A8%EB%A1%9C%ED%8D%BC%ED%8A%B8/"/>
    
    <category term="김민준" scheme="https://devjang.github.io/tags/%EA%B9%80%EB%AF%BC%EC%A4%80/"/>
    
  </entry>
  
  <entry>
    <title>모던 웹을 위한 HTML5+CSS3 바이블(3판)</title>
    <link href="https://devjang.github.io/2019/06/09/2019-06-09-modern-web-html5-css3/"/>
    <id>https://devjang.github.io/2019/06/09/2019-06-09-modern-web-html5-css3/</id>
    <published>2019-06-08T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.861Z</updated>
    
    <content type="html"><![CDATA[<p>웹 표준을 적용한 480개의 코드로 배우는 웹 페이지 제작의 모든 것</p><p>모던 웹을 위한 HTML5+CSS3 바이블 리뷰!</p><a id="more"></a><hr><blockquote><h2 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h2><p>출판사 : 한빛<br>저자 : 윤인성<br>출간 : 2019-06-09<br>페이지 : 632<br>ISBN : 9791162241585<br>가격 : 32,000원</p></blockquote><ul><li>자세한 정보<br>: <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=14840760">https://book.naver.com/bookdb/book_detail.nhn?bid=14840760</a><br>: <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B8371709349">http://www.hanbit.co.kr/store/books/look.php?p_code=B8371709349</a></li></ul><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><ol><li>한빛 출판에 윤인성 저자님</li><li>모던 웹 시리즈</li></ol><p>사실 위 조합의 책은 따로 구매하거나 읽어본 적이 없었다.</p><ul><li>모던 웹을 위한 HTML5+CSS3 바이블</li><li>모던 웹을 위한 JavaScript + jQuery 입문</li><li>모던 웹을 위한 Node.js 프로그래밍</li><li>모던 웹을 위한 HTML5 프로그래밍</li></ul><p>굉장히 많은 모던 웹 시리즈가 있는데 FE 개발자가 볼만한 책은 딱 이정도로 보인다.</p><p>이번 <code>나는 리뷰어다</code> 덕분에 처음으로 모던 웹 시리즈를 접해볼 수 있었고</p><p>결국 <code>모던 웹 시리즈</code> 첫 인상에 비해 굉장히 좋은 책이라는 감명을 받았다.</p><h2 id="레퍼런스가-요약된-바이블"><a href="#레퍼런스가-요약된-바이블" class="headerlink" title="레퍼런스가 요약된 바이블"></a>레퍼런스가 요약된 바이블</h2><p>일단 책 두께에 앞도 당하는 것 마냥 굉장히 두껍고 많은 분량을 볼 수 있다.</p><p><img src="http://2.bp.blogspot.com/-6FdMlxWTERY/XP3JbkDInnI/AAAAAAAAK9Q/9Xy4OlHAs1wo57uC8CNXRBbL3-rUGmtOQCK4BGAYYCw/s1600/3.jpeg"></p><ul><li>마치 레퍼런스와 같은 구성</li></ul><p>사실 레퍼런스는 MDN 문서를 참고하는게 좋은 방향이라고 생각하지만</p><p>초보자들이나 입문자에게는 이질감이 들 수 있다.<br>거기다가 코뿔소 같은 책을 보더라도 너무 딱딱한 느낌을 받을 수 있지만</p><p>이 책은 <code>HTML 태그와 CSS attribute들에 대해 굉장히 쉽게 잘 설명해놓았다.</code></p><h2 id="실무에-최적화"><a href="#실무에-최적화" class="headerlink" title="실무에 최적화"></a>실무에 최적화</h2><p>레퍼런스 내용만을 다루는 것이 아닌<br>다양한 웹 페이지 레이아웃을 다루는 부분이 인상적이었다.</p><p>우리나라의 웹페이지는 복잡하고 Too Much 레이아웃 형태들을 가지고 있다.</p><p>특히 <code>일반 웹 페이지, 모바일, 태블릿, 소셜 커머스 등의 레이아웃</code>을 다루는 점은 굉장히 인상적이었다.</p><p>동적인 UI / UX보다는 정말 우리나라의 퍼블리셔와 FE 개발자들이 실무에서 접하기 흔한 레이아웃을 다룬다는 점이다.</p><h2 id="꼼꼼하고-보기-좋은-풀-컬러-책"><a href="#꼼꼼하고-보기-좋은-풀-컬러-책" class="headerlink" title="꼼꼼하고 보기 좋은 풀 컬러 책"></a>꼼꼼하고 보기 좋은 풀 컬러 책</h2><p>베타 리더를 하며 항상 출판사에 피드백하는 부분은 코드 가독성이다.</p><p><img src="http://1.bp.blogspot.com/-ExmXg6TyjFs/XP3J5fxMAtI/AAAAAAAAK9c/YgE19lCLkyAaE7W47ol02qwTD-t6xYaOwCK4BGAYYCw/s1600/4.jpeg"></p><ul><li>깔끔한 코드 가독성</li></ul><p>독자를 배려한다는 느낌의 감동을 받을 정도로 <code>깔끔한 가독성</code>이다.<br>거기다가 모든 페이지가 <code>100% 풀 컬러</code>다.</p><p><img src="http://4.bp.blogspot.com/-joFgKOW_e-o/XP3IXZX3L9I/AAAAAAAAK9E/UiJ-ATmQBe4AU6K25jdjrGyWcoDxyaYrgCK4BGAYYCw/s1600/2.jpeg"></p><p>저자가 얼마나 꼼꼼하게<br>책을 준비했는지 몸소 느낄 수 있다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>아쉬운 점은 모던 웹 시리즈인데 모던한 CSS 부분은 놓치는 게 아닌가 싶었다.</p><p>Flex 및 Grid Layout에 대해 더 다뤄봤으면 좋았을 것 같고<br>less보다는 sass(scss)를 다뤘으면 더 좋았을 것 같다.</p><p>요약하자면 웹 표준, 웹 접근성보다는<br><code>레퍼런스 + 우리나라 실무에 가까운 레이아웃</code>의 구성으로 된 책이다.</p><p>또한<br>정말 깔끔한 가독성과 저자의 꼼꼼함으로<br>입문자부터 CSS를 전혀 모르는 개발자들까지 보기 좋게 구성되어 있기 때문에</p><p>회사든 집이든 책장에 꽂아놓고 두고두고 보기에도 굉장히 좋을 것 같다.</p><p><strong>이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;웹 표준을 적용한 480개의 코드로 배우는 웹 페이지 제작의 모든 것&lt;/p&gt;
&lt;p&gt;모던 웹을 위한 HTML5+CSS3 바이블 리뷰!&lt;/p&gt;</summary>
    
    
    
    <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
    <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
    <category term="css" scheme="https://devjang.github.io/categories/book/programming/css/"/>
    
    
    <category term="모던 웹을 위한 HTML5+CSS3 바이블" scheme="https://devjang.github.io/tags/%EB%AA%A8%EB%8D%98-%EC%9B%B9%EC%9D%84-%EC%9C%84%ED%95%9C-HTML5-CSS3-%EB%B0%94%EC%9D%B4%EB%B8%94/"/>
    
    <category term="HTML5" scheme="https://devjang.github.io/tags/HTML5/"/>
    
    <category term="CSS3" scheme="https://devjang.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/04/27/2019-04-27-javascipt30-8/"/>
    <id>https://devjang.github.io/2019/04/27/2019-04-27-javascipt30-8/</id>
    <published>2019-04-26T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.861Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 8주차</p><ul><li>Geolocation based Speedometer and Compass</li><li>Follow Along Links</li><li>Speech Synthesis</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/X7Cbtra0C6I/maxresdefault.jpg"></p><h1 id="21-Geolocation-based-Speedometer-and-Compass"><a href="#21-Geolocation-based-Speedometer-and-Compass" class="headerlink" title="21. Geolocation based Speedometer and Compass"></a>21. Geolocation based Speedometer and Compass</h1><p>영상: <a href="https://youtu.be/X7Cbtra0C6I">https://youtu.be/X7Cbtra0C6I</a></p><p><code>Geolocation</code> 기반의 속도계 &amp; 나침반</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arrow = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.arrow&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> speed = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.speed-value&#x27;</span>);</span><br><span class="line"></span><br><span class="line">navigator.geolocation.watchPosition(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// DOM에 속도계 반영</span></span><br><span class="line">  speed.textContent = data.coords.speed;</span><br><span class="line">  <span class="comment">// CSS에 접근하여 나침반 시각화</span></span><br><span class="line">  arrow.style.transform = <span class="string">`rotate(<span class="subst">$&#123;data.coords.heading&#125;</span>deg)`</span>;</span><br><span class="line">&#125;, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p><img src="http://i3.ytimg.com/vi/POP_qri7RA8/maxresdefault.jpg"></p><h1 id="22-Follow-Along-Links"><a href="#22-Follow-Along-Links" class="headerlink" title="22. Follow Along Links"></a>22. Follow Along Links</h1><p>영상: <a href="https://youtu.be/POP_qri7RA8">https://youtu.be/POP_qri7RA8</a></p><p><a href="https://developer.mozilla.org/ko/docs/Web/API/Element/getBoundingClientRect">getBoundingClientRect()</a>를 활용한 마우스 오버 링크 스타일링</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> triggers = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> highlight = <span class="built_in">document</span>.createElement(<span class="string">&#x27;span&#x27;</span>);</span><br><span class="line">highlight.classList.add(<span class="string">&#x27;highlight&#x27;</span>);</span><br><span class="line"><span class="built_in">document</span>.body.appendChild(highlight);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">highlightLink</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// viewport에서의 상대적인 위치를 반환</span></span><br><span class="line">  <span class="keyword">const</span> linkCoords = <span class="built_in">this</span>.getBoundingClientRect();</span><br><span class="line">  <span class="keyword">const</span> coords = &#123;</span><br><span class="line">    width: linkCoords.width,</span><br><span class="line">    height: linkCoords.height,</span><br><span class="line">    top: linkCoords.top + <span class="built_in">window</span>.scrollY,</span><br><span class="line">    left: linkCoords.left + <span class="built_in">window</span>.scrollX</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  highlight.style.width = <span class="string">`<span class="subst">$&#123;coords.width&#125;</span>px`</span>;</span><br><span class="line">  highlight.style.height = <span class="string">`<span class="subst">$&#123;coords.height&#125;</span>px`</span>;</span><br><span class="line">  highlight.style.transform = <span class="string">`translate(<span class="subst">$&#123;coords.left&#125;</span>px, <span class="subst">$&#123;coords.top&#125;</span>px)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">triggers.forEach(<span class="function"><span class="params">a</span> =&gt;</span> a.addEventListener(<span class="string">&#x27;mouseenter&#x27;</span>, highlightLink));</span><br></pre></td></tr></table></figure><hr><p><img src="http://i3.ytimg.com/vi/saCpKH_xdgs/maxresdefault.jpg"></p><h1 id="23-Speech-Synthesis"><a href="#23-Speech-Synthesis" class="headerlink" title="23. Speech Synthesis"></a>23. Speech Synthesis</h1><p>영상: <a href="https://youtu.be/saCpKH_xdgs">https://youtu.be/saCpKH_xdgs</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/SpeechSynthesisUtterance">SpeechSynthesisUtterance</a> API를 활용한 다국어 TTS</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 스피치 인스턴스 생성</span></span><br><span class="line"><span class="keyword">const</span> msg = <span class="keyword">new</span> SpeechSynthesisUtterance();</span><br><span class="line"><span class="keyword">let</span> voices = [];</span><br><span class="line"><span class="keyword">const</span> voicesDropdown = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;[name=&quot;voice&quot;]&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> options = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;[type=&quot;range&quot;], [name=&quot;text&quot;]&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> speakButton = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#speak&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> stopButton = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#stop&#x27;</span>);</span><br><span class="line">msg.text = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;[name=&quot;text&quot;]&#x27;</span>).value;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">populateVoices</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 디바이스의 모든 음성 객체 리스트 반환</span></span><br><span class="line">  voices = <span class="built_in">this</span>.getVoices();</span><br><span class="line">  voicesDropdown.innerHTML = voices</span><br><span class="line">    .filter(<span class="function"><span class="params">voice</span> =&gt;</span> voice.lang.includes(<span class="string">&#x27;en&#x27;</span>))</span><br><span class="line">    .map(<span class="function"><span class="params">voice</span> =&gt;</span> <span class="string">`&lt;option value=&quot;<span class="subst">$&#123;voice.name&#125;</span>&quot;&gt;<span class="subst">$&#123;voice.name&#125;</span> (<span class="subst">$&#123;voice.lang&#125;</span>)&lt;/option&gt;`</span>)</span><br><span class="line">    .join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setVoice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  msg.voice = voices.find(<span class="function"><span class="params">voice</span> =&gt;</span> voice.name === <span class="built_in">this</span>.value);</span><br><span class="line">  toggle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggle</span>(<span class="params">startOver = true</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 말을 멈추거나 취소한다</span></span><br><span class="line">  speechSynthesis.cancel();</span><br><span class="line">  <span class="keyword">if</span> (startOver) &#123;</span><br><span class="line">    <span class="comment">// 발언을 추가한다</span></span><br><span class="line">    speechSynthesis.speak(msg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setOption</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.value);</span><br><span class="line">  msg[<span class="built_in">this</span>.name] = <span class="built_in">this</span>.value;</span><br><span class="line">  toggle();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// getVoices() 메서드 반환될 SpeechSynthesisVoice 리스트 변경시</span></span><br><span class="line">speechSynthesis.addEventListener(<span class="string">&#x27;voiceschanged&#x27;</span>, populateVoices);</span><br><span class="line">voicesDropdown.addEventListener(<span class="string">&#x27;change&#x27;</span>, setVoice);</span><br><span class="line">options.forEach(<span class="function"><span class="params">option</span> =&gt;</span> option.addEventListener(<span class="string">&#x27;change&#x27;</span>, setOption));</span><br><span class="line">speakButton.addEventListener(<span class="string">&#x27;click&#x27;</span>, toggle);</span><br><span class="line">stopButton.addEventListener(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> toggle(<span class="literal">false</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 8주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Geolocation based Speedometer and Compass&lt;/li&gt;
&lt;li&gt;Follow Along Links&lt;/li&gt;
&lt;li&gt;Speech Synthesis&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
    <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
    <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
    <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/04/14/2019-04-14-javascipt30-7/"/>
    <id>https://devjang.github.io/2019/04/14/2019-04-14-javascipt30-7/</id>
    <published>2019-04-13T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.860Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 7주차</p><ul><li>How JavaScript’s Array Reduce Works</li><li>Unreal Webcam Fun with getUserMedia() and HTML5 Canvas</li><li>Speech Recognition</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/SadWPo2KZWg/maxresdefault.jpg"></p><h1 id="18-How-JavaScript’s-Array-Reduce-Works"><a href="#18-How-JavaScript’s-Array-Reduce-Works" class="headerlink" title="18. How JavaScript’s Array Reduce Works"></a>18. How JavaScript’s Array Reduce Works</h1><p>영상: <a href="https://youtu.be/SadWPo2KZWg">https://youtu.be/SadWPo2KZWg</a></p><p><code>reduce</code> 메서드의 활용 방법</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// data-* 를 이용해 셀렉팅 후 배열 메서드 활용을 위해 Array.from() 사용</span></span><br><span class="line"><span class="keyword">const</span> timeNodes = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;[data-time]&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// map을 통해 데이터를 가공 후 reduce를 통해 누적값 활용</span></span><br><span class="line"><span class="keyword">const</span> seconds = timeNodes</span><br><span class="line">  .map(<span class="function"><span class="params">node</span> =&gt;</span> node.dataset.time)</span><br><span class="line">  .map(<span class="function"><span class="params">timeCode</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> [mins, secs] = timeCode.split(<span class="string">&#x27;:&#x27;</span>).map(<span class="built_in">parseFloat</span>);</span><br><span class="line">    <span class="keyword">return</span> (mins * <span class="number">60</span>) + secs;</span><br><span class="line">  &#125;)</span><br><span class="line">  .reduce(<span class="function">(<span class="params">total, vidSeconds</span>) =&gt;</span> total + vidSeconds);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> secondsLeft = seconds;</span><br><span class="line">  <span class="keyword">const</span> hours = <span class="built_in">Math</span>.floor(secondsLeft / <span class="number">3600</span>);</span><br><span class="line">  secondsLeft = secondsLeft % <span class="number">3600</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> mins = <span class="built_in">Math</span>.floor(secondsLeft / <span class="number">60</span>);</span><br><span class="line">  secondsLeft = secondsLeft % <span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(hours, mins, secondsLeft);</span><br></pre></td></tr></table></figure><hr><p><img src="http://i3.ytimg.com/vi/ElWFcBlVk-o/maxresdefault.jpg"></p><h1 id="19-Unreal-Webcam-Fun-with-getUserMedia-and-HTML5-Canvas"><a href="#19-Unreal-Webcam-Fun-with-getUserMedia-and-HTML5-Canvas" class="headerlink" title="19. Unreal Webcam Fun with getUserMedia() and HTML5 Canvas"></a>19. Unreal Webcam Fun with getUserMedia() and HTML5 Canvas</h1><p>영상: <a href="https://youtu.be/ElWFcBlVk-o">https://youtu.be/ElWFcBlVk-o</a></p><p><code>getUserMedia()</code>와 HTML5 캔버스를 활용</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getUserMedia()를 통한 접근</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getVideo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  navigator.mediaDevices.getUserMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">    .then(<span class="function"><span class="params">localMediaStream</span> =&gt;</span> &#123;</span><br><span class="line">      video.srcObject = localMediaStream;</span><br><span class="line">      video.play();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.error(<span class="string">`OH NO!!!`</span>, err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// canplay 이벤트 타입은 비디오를 재생할 수 있을 때 트리거 된다</span></span><br><span class="line">video.addEventListener(<span class="string">&#x27;canplay&#x27;</span>, paintToCanvas);</span><br></pre></td></tr></table></figure><p>이외에 로직은 RGB 값 및 캔버스 조작과 <code>takePhoto()</code> 함수를 통한 로직</p><hr><p><img src="http://i3.ytimg.com/vi/0mJC0A72Fnw/maxresdefault.jpg"></p><h1 id="20-Speech-Recognition"><a href="#20-Speech-Recognition" class="headerlink" title="20. Speech Recognition"></a>20. Speech Recognition</h1><p>영상: <a href="https://youtu.be/0mJC0A72Fnw">https://youtu.be/0mJC0A72Fnw</a></p><p><a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_Speech_API">Web Speech API</a>를 활용한 음성인식</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.SpeechRecognition = <span class="built_in">window</span>.SpeechRecognition || <span class="built_in">window</span>.webkitSpeechRecognition;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> recognition = <span class="keyword">new</span> SpeechRecognition();</span><br><span class="line"><span class="comment">// 중간결과 반환 여부 (기본값은 false)</span></span><br><span class="line">recognition.interimResults = <span class="literal">true</span>;</span><br><span class="line">recognition.lang = <span class="string">&#x27;en-US&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> words = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;.words&#x27;</span>);</span><br><span class="line">words.appendChild(p);</span><br><span class="line"></span><br><span class="line">recognition.addEventListener(<span class="string">&#x27;result&#x27;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> transcript = <span class="built_in">Array</span>.from(e.results)</span><br><span class="line">    .map(<span class="function"><span class="params">result</span> =&gt;</span> result[<span class="number">0</span>])</span><br><span class="line">    .map(<span class="function"><span class="params">result</span> =&gt;</span> result.transcript)</span><br><span class="line">    .join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 음성 인식 중 지정된 단어는 &#x27;💩&#x27;으로 대체</span></span><br><span class="line">    <span class="keyword">const</span> poopScript = transcript.replace(<span class="regexp">/poop|poo|shit|dump/gi</span>, <span class="string">&#x27;💩&#x27;</span>);</span><br><span class="line">    p.textContent = poopScript;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (e.results[<span class="number">0</span>].isFinal) &#123;</span><br><span class="line">      p = <span class="built_in">document</span>.createElement(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">      words.appendChild(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 음성 인식이 끝나거나 종료되었을때</span></span><br><span class="line">recognition.addEventListener(<span class="string">&#x27;end&#x27;</span>, recognition.start);</span><br><span class="line"></span><br><span class="line">recognition.start();</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 7주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How JavaScript’s Array Reduce Works&lt;/li&gt;
&lt;li&gt;Unreal Webcam Fun with getUserMedia() and HTML5 Canvas&lt;/li&gt;
&lt;li&gt;Speech Recognition&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
    <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
    <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
    <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>실습과 그림으로 배우는 리눅스 구조</title>
    <link href="https://devjang.github.io/2019/04/14/2019-04-14-linux-example-photo-book/"/>
    <id>https://devjang.github.io/2019/04/14/2019-04-14-linux-example-photo-book/</id>
    <published>2019-04-13T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.860Z</updated>
    
    <content type="html"><![CDATA[<p>개발자가 알아야 하는 OS와 하드웨어의 기초 </p><a id="more"></a><hr><blockquote><h3 id="책-정보"><a href="#책-정보" class="headerlink" title="책 정보"></a>책 정보</h3><p>출판사 : 한빛미디어<br>저자 : 다케우치 사토루<br>역자 : 신준희<br>출간 : 2019.02.20<br>페이지 : 304<br>ISBN : 9791162241523<br>가격 : 24,000원</p></blockquote><ul><li>자세한 정보<br>: <a href="https://book.naver.com/bookdb/book_detail.nhn?bid=14524977">https://book.naver.com/bookdb/book_detail.nhn?bid=14524977</a><br>: <a href="http://www.hanbit.co.kr/store/books/look.php?p_code=B2453522793">http://www.hanbit.co.kr/store/books/look.php?p_code=B2453522793</a></li></ul><h2 id="소개"><a href="#소개" class="headerlink" title="소개"></a>소개</h2><p>컴퓨터 공학 기초와 개발자의 레벨업을 돕는 데에 초점이 있다는 소개가 주이며</p><p>특히 출판사에서는 실습과 그림을 강조한 점이 눈에 띈다</p><p>하지만 책을 보기 전에 느낀 개인적인 강점은<br>보통의 두껍고 부담스러운 리눅스 책들에 비해 얇고 가볍다는 것이었다.</p><h2 id="이해를-돕는-도식화"><a href="#이해를-돕는-도식화" class="headerlink" title="이해를 돕는 도식화"></a>이해를 돕는 도식화</h2><p>책 자체는 구성부터 실습 예제까지 굉장히 <code>친절한</code> 편이다.</p><p>특히 그림이라는 표현보다는 도식화라는 표현이 더 어울릴 법하다고 생각하는데<br>(왜 그림이라고 표현했는지는 모르겠다)</p><p>스케줄러와 메모리 그리고 시스템 콜 등은 정말 상세하게 도식화되어있다.</p><p><code>책 분량의 절반은 도식화</code>라고 볼 수 있을 정도로 친절한 책이다.</p><h2 id="컴퓨터-공학-기초부터-데브옵스-입문까지"><a href="#컴퓨터-공학-기초부터-데브옵스-입문까지" class="headerlink" title="컴퓨터 공학 기초부터 데브옵스 입문까지"></a>컴퓨터 공학 기초부터 데브옵스 입문까지</h2><p>사실 책을 보기 전에 받은 첫 느낌은 그저 리눅스에 한정된 책이고<br>그에 해당하는 두께를 가졌구나였다.</p><p>하지만 책 분량에 비해 컴퓨터 공학 기초에 대해서도 상당히 많이 다루고 있었고</p><p>다양한 케이스와 실습을 다루고 있기에 도움이 데브옵스 입문에도 도움이 될 것 같다.</p><p>물론 쌩 입문자가 볼 수는 없는 수준이지만 최소한의 컴퓨터 공학 기초가 있거나<br>현업에서 일하는 비전공 개발자들에게 디딤돌이 될만한 책이라 생각이 든다.</p><p><strong>이 서평은 한빛미디어를 통해 제공받은 서적을 토대로 작성된 리뷰입니다.</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;개발자가 알아야 하는 OS와 하드웨어의 기초 &lt;/p&gt;</summary>
    
    
    
    <category term="book" scheme="https://devjang.github.io/categories/book/"/>
    
    <category term="programming" scheme="https://devjang.github.io/categories/book/programming/"/>
    
    <category term="computer science" scheme="https://devjang.github.io/categories/book/programming/computer-science/"/>
    
    
    <category term="리눅스" scheme="https://devjang.github.io/tags/%EB%A6%AC%EB%88%85%EC%8A%A4/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/04/07/2019-04-07-javascipt30-6/"/>
    <id>https://devjang.github.io/2019/04/07/2019-04-07-javascipt30-6/</id>
    <published>2019-04-06T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.860Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 6주차</p><ul><li>LocalStorage and Event Delegation</li><li>CSS Text Shadow Mouse Move Effect</li><li>Sorting Band Names without articles</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/YL1F4dCUlLc/maxresdefault.jpg"></p><h1 id="15-LocalStorage-and-Event-Delegation"><a href="#15-LocalStorage-and-Event-Delegation" class="headerlink" title="15. LocalStorage and Event Delegation"></a>15. LocalStorage and Event Delegation</h1><p>영상: <a href="https://youtu.be/YL1F4dCUlLc">https://youtu.be/YL1F4dCUlLc</a></p><p>로컬 스토리지와 이벤트 위임</p><p>리스트의 <code>&lt;ul&gt;</code> 태그에 이벤트를 등록하여 자식요소인 다수의 <code>&lt;li&gt;</code> 태그에 이벤트를 한번에 등록한다.</p><p>이외에 특별한 부분은 존재하지 않았으며</p><p><code>&lt;form&gt;</code> 태그에 당연히 <code>e.preventDefault()</code>를 사용한 점과<br><code>reset()</code>을 활용한 부분을 다시 한번 상기시킬 수 있었다.</p><hr><p><img src="http://i3.ytimg.com/vi/zaz9gLI-Xac/maxresdefault.jpg"></p><h1 id="16-CSS-Text-Shadow-Mouse-Move-Effect"><a href="#16-CSS-Text-Shadow-Mouse-Move-Effect" class="headerlink" title="16. CSS Text Shadow Mouse Move Effect"></a>16. CSS Text Shadow Mouse Move Effect</h1><p>영상: <a href="https://youtu.be/zaz9gLI-Xac">https://youtu.be/zaz9gLI-Xac</a></p><p>Text Shadow 효과 활용하기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="attr">offsetWidth</span>: width, <span class="attr">offsetHeight</span>: height &#125; = hero;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">offsetX</span>: x, <span class="attr">offsetY</span>: y &#125; = e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span> !== e.target) &#123;</span><br><span class="line">  x = x + e.target.offsetLeft;</span><br><span class="line">  y = y + e.target.offsetTop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> xWalk = <span class="built_in">Math</span>.round((x / width * walk) - (walk / <span class="number">2</span>));</span><br><span class="line"><span class="keyword">const</span> yWalk = <span class="built_in">Math</span>.round((y / height * walk) - (walk / <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">text.style.textShadow = <span class="string">`</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;xWalk&#125;</span>px <span class="subst">$&#123;yWalk&#125;</span>px 0 rgba(255,0,255,0.7),</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;xWalk * <span class="number">-1</span>&#125;</span>px <span class="subst">$&#123;yWalk&#125;</span>px 0 rgba(0,255,255,0.7),</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;yWalk&#125;</span>px <span class="subst">$&#123;xWalk * <span class="number">-1</span>&#125;</span>px 0 rgba(0,255,0,0.7),</span></span><br><span class="line"><span class="string">  <span class="subst">$&#123;yWalk * <span class="number">-1</span>&#125;</span>px <span class="subst">$&#123;xWalk&#125;</span>px 0 rgba(0,0,255,0.7)</span></span><br><span class="line"><span class="string">`</span>;</span><br></pre></td></tr></table></figure><p><code>mousemove</code> 이벤트 타입을 사용하여 텍스트의 `textShadow 스타일링을 수정한다.</p><hr><p><img src="http://i3.ytimg.com/vi/PEEo-2mRQ7A/maxresdefault.jpg"></p><h1 id="17-Sorting-Band-Names-without-articles"><a href="#17-Sorting-Band-Names-without-articles" class="headerlink" title="17. Sorting Band Names without articles"></a>17. Sorting Band Names without articles</h1><p>영상: <a href="https://youtu.be/PEEo-2mRQ7A">https://youtu.be/PEEo-2mRQ7A</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bands = [<span class="string">&#x27;The Plot in You&#x27;</span>, <span class="string">&#x27;The Devil Wears Prada&#x27;</span>, <span class="string">&#x27;Pierce the Veil&#x27;</span>, <span class="string">&#x27;Norma Jean&#x27;</span>, <span class="string">&#x27;The Bled&#x27;</span>, <span class="string">&#x27;Say Anything&#x27;</span>, <span class="string">&#x27;The Midway State&#x27;</span>, <span class="string">&#x27;We Came as Romans&#x27;</span>, <span class="string">&#x27;Counterparts&#x27;</span>, <span class="string">&#x27;Oh, Sleeper&#x27;</span>, <span class="string">&#x27;A Skylit Drive&#x27;</span>, <span class="string">&#x27;Anywhere But Here&#x27;</span>, <span class="string">&#x27;An Old Dog&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">strip</span>(<span class="params">bandName</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> bandName.replace(<span class="regexp">/^(a |the |an )/i</span>, <span class="string">&#x27;&#x27;</span>).trim();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> sortedBands = bands.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> strip(a) &gt; strip(b) ? <span class="number">1</span> : <span class="number">-1</span>);</span><br></pre></td></tr></table></figure><p><code>sort()</code> 메서드를 활용한 정렬과 정규표현식 활용 방법으로 딱히 특별한 내용은 없었다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 6주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LocalStorage and Event Delegation&lt;/li&gt;
&lt;li&gt;CSS Text Shadow Mouse Move Effect&lt;/li&gt;
&lt;li&gt;Sorting Band Names without articles&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
    <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
    <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
    <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/03/31/2019-03-31-javascipt30-5/"/>
    <id>https://devjang.github.io/2019/03/31/2019-03-31-javascipt30-5/</id>
    <published>2019-03-30T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.860Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 5주차</p><ul><li>JavaScript KONAMI CODE!</li><li>Vanilla JavaScript Slide In on Scroll</li><li>JavaScript Fundamentals: Reference VS Copy</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/_A5eVOIqGLU/maxresdefault.jpg"></p><h1 id="12-JavaScript-KONAMI-CODE"><a href="#12-JavaScript-KONAMI-CODE" class="headerlink" title="12. JavaScript KONAMI CODE!"></a>12. JavaScript KONAMI CODE!</h1><p>영상: <a href="https://youtu.be/_A5eVOIqGLU">https://youtu.be/_A5eVOIqGLU</a></p><p>키 입력 감지</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pressed = [];</span><br><span class="line"><span class="keyword">const</span> secretCode = <span class="string">&#x27;wesbos&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;keyup&#x27;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">  pressed.push(e.key);</span><br><span class="line">  <span class="comment">// 입력된 키의 배열을 최신순으로 최대 6개 유지시킨다</span></span><br><span class="line">  pressed.splice(-secretCode.length - <span class="number">1</span>, pressed.length - secretCode.length);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 미리 정의된 secretCode와 입력된 키 배열을 대조하여 UI에 변화를 준다.</span></span><br><span class="line">  <span class="keyword">if</span> (pressed.join(<span class="string">&#x27;&#x27;</span>).includes(secretCode)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;DING DING!&#x27;</span>);</span><br><span class="line">    cornify_add();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><hr><p><img src="http://i3.ytimg.com/vi/uzRsENVD3W8/maxresdefault.jpg"></p><h1 id="13-Vanilla-JavaScript-Slide-In-on-Scroll"><a href="#13-Vanilla-JavaScript-Slide-In-on-Scroll" class="headerlink" title="13. Vanilla JavaScript Slide In on Scroll"></a>13. Vanilla JavaScript Slide In on Scroll</h1><p>영상: <a href="https://youtu.be/uzRsENVD3W8">https://youtu.be/uzRsENVD3W8</a></p><p>스크롤 이벤트 활용하기</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 성능 최적화를 위한 함수</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">func, wait = <span class="number">20</span>, immediate = true</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> timeout;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 윈도우 객체</span></span><br><span class="line">    <span class="keyword">var</span> context = <span class="built_in">this</span>;</span><br><span class="line">    <span class="comment">// 스크롤 이벤트</span></span><br><span class="line">    <span class="keyword">var</span> args = <span class="built_in">arguments</span>;</span><br><span class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      timeout = <span class="literal">null</span>;</span><br><span class="line">      <span class="keyword">if</span> (!immediate) func.apply(context, args);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">var</span> callNow = immediate &amp;&amp; !timeout;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">    timeout = <span class="built_in">setTimeout</span>(later, wait);</span><br><span class="line">    <span class="keyword">if</span> (callNow) func.apply(context, args);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkSlide</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  sliderImages.forEach(<span class="function"><span class="params">sliderImage</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> slideInAt = (<span class="built_in">window</span>.scrollY + <span class="built_in">window</span>.innerHeight) - sliderImage.height / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> imageBottom = sliderImage.offsetTop + sliderImage.height;</span><br><span class="line">    <span class="keyword">const</span> isHalfShown = slideInAt &gt; sliderImage.offsetTop;</span><br><span class="line">    <span class="keyword">const</span> isNotScrolledPast = <span class="built_in">window</span>.scrollY &lt; imageBottom;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// css 트랜스폼 translateX 속성 변경으로 스크롤을 통한 가로 슬라이드 효과를 준다.</span></span><br><span class="line">    <span class="keyword">if</span> (isHalfShown &amp;&amp; isNotScrolledPast) &#123;</span><br><span class="line">      sliderImage.classList.add(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      sliderImage.classList.remove(<span class="string">&#x27;active&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 성능 최적화를 위해 debounce()에 함수를 위임한다.</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;scroll&#x27;</span>, debounce(checkSlide));</span><br></pre></td></tr></table></figure><hr><p><img src="http://i3.ytimg.com/vi/YnfwDQ5XYF4/maxresdefault.jpg"></p><h1 id="14-JavaScript-Fundamentals-Reference-VS-Copy"><a href="#14-JavaScript-Fundamentals-Reference-VS-Copy" class="headerlink" title="14. JavaScript Fundamentals: Reference VS Copy"></a>14. JavaScript Fundamentals: Reference VS Copy</h1><p>영상: <a href="https://youtu.be/YnfwDQ5XYF4">https://youtu.be/YnfwDQ5XYF4</a></p><p>JavaScript의 객체와 배열 그리고 참조 vs 복사</p><h3 id="배열"><a href="#배열" class="headerlink" title="배열"></a>배열</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 원본 배열</span></span><br><span class="line"><span class="keyword">const</span> players = [<span class="string">&#x27;Wes&#x27;</span>, <span class="string">&#x27;Sarah&#x27;</span>, <span class="string">&#x27;Ryan&#x27;</span>, <span class="string">&#x27;Poppy&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 배열 복사를 예상</span></span><br><span class="line"><span class="keyword">const</span> team = players;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 문제 발생</span></span><br><span class="line">team[<span class="number">3</span>] = <span class="string">&#x27;Lux&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 대안</span></span><br><span class="line"><span class="keyword">const</span> team2 = players.slice();</span><br><span class="line"><span class="keyword">const</span> team3 = [].concat(players);</span><br><span class="line"><span class="keyword">const</span> team4 = [...players];</span><br><span class="line"><span class="keyword">const</span> team5 = <span class="built_in">Array</span>.from(players);</span><br></pre></td></tr></table></figure><h3 id="객체"><a href="#객체" class="headerlink" title="객체"></a>객체</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 원본 객체</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Wes Bos&#x27;</span>,</span><br><span class="line">  age: <span class="number">80</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 복사를 예상</span></span><br><span class="line"><span class="keyword">const</span> captain = person;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 문제 발생</span></span><br><span class="line">captain.number = <span class="number">99</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 대안</span></span><br><span class="line"><span class="keyword">const</span> cap2 = <span class="built_in">Object</span>.assign(&#123;&#125;, person, &#123; <span class="attr">number</span>: <span class="number">99</span>, <span class="attr">age</span>: <span class="number">12</span> &#125;);</span><br><span class="line"><span class="keyword">const</span> cap3 = &#123;...person&#125;;</span><br></pre></td></tr></table></figure><h3 id="객체-1-depth-초과"><a href="#객체-1-depth-초과" class="headerlink" title="객체 (1 depth 초과)"></a>객체 (1 depth 초과)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 원본 객체</span></span><br><span class="line"><span class="keyword">const</span> wes = &#123;</span><br><span class="line">  name: <span class="string">&#x27;Wes&#x27;</span>,</span><br><span class="line">  age: <span class="number">100</span>,</span><br><span class="line">  social: &#123;</span><br><span class="line">    twitter: <span class="string">&#x27;@wesbos&#x27;</span>,</span><br><span class="line">    facebook: <span class="string">&#x27;wesbos.developer&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 객체 복사를 예상</span></span><br><span class="line"><span class="keyword">const</span> dev = <span class="built_in">Object</span>.assign(&#123;&#125;, wes);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 문제 발생</span></span><br><span class="line">dev.social.twitter = <span class="string">&#x27;@coolman&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 대안</span></span><br><span class="line"><span class="comment">// lodash의 cloneDeep 사용</span></span><br><span class="line"><span class="comment">// JSON 활용</span></span><br><span class="line"><span class="keyword">const</span> dev2 = <span class="built_in">JSON</span>.parse(<span class="built_in">JSON</span>.stringify(wes));</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 5주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript KONAMI CODE!&lt;/li&gt;
&lt;li&gt;Vanilla JavaScript Slide In on Scroll&lt;/li&gt;
&lt;li&gt;JavaScript Fundamentals: Reference VS Copy&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
    <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
    <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
    <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/03/24/2019-03-24-javascipt30-4/"/>
    <id>https://devjang.github.io/2019/03/24/2019-03-24-javascipt30-4/</id>
    <published>2019-03-23T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.859Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 4주차</p><ul><li>14 Must Know Chrome Dev Tools Tricks</li><li>JS Checkbox Challenge!</li><li>Custom HTML5 Video Player</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/xkzDaKwinA8/maxresdefault.jpg"></p><h1 id="9-14-Must-Know-Chrome-Dev-Tools-Tricks"><a href="#9-14-Must-Know-Chrome-Dev-Tools-Tricks" class="headerlink" title="9. 14 Must Know Chrome Dev Tools Tricks"></a>9. 14 Must Know Chrome Dev Tools Tricks</h1><p>영상: <a href="https://youtu.be/xkzDaKwinA8">https://youtu.be/xkzDaKwinA8</a> </p><p>크롬 개발자 도구의 콘솔를 활용하는 팁</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 보간법</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;Hello I am a %s string!&#x27;</span>, <span class="string">&#x27;💩&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 스타일링</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;%c I am some great text&#x27;</span>, <span class="string">&#x27;font-size:50px; background:red; text-shadow: 10px 10px 0 blue&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="comment">// 테스팅</span></span><br><span class="line"><span class="built_in">console</span>.assert(p.classList.contains(<span class="string">&#x27;ouch&#x27;</span>), <span class="string">&#x27;That is wrong!&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 콘솔 그룹화</span></span><br><span class="line">dogs.forEach(<span class="function"><span class="params">dog</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.groupCollapsed(<span class="string">`<span class="subst">$&#123;dog.name&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`This is <span class="subst">$&#123;dog.name&#125;</span>`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;dog.name&#125;</span> is <span class="subst">$&#123;dog.age&#125;</span> years old`</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;dog.name&#125;</span> is <span class="subst">$&#123;dog.age * <span class="number">7</span>&#125;</span> dog years old`</span>);</span><br><span class="line">  <span class="built_in">console</span>.groupEnd(<span class="string">`<span class="subst">$&#123;dog.name&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 타이머</span></span><br><span class="line"><span class="built_in">console</span>.time(<span class="string">&#x27;fetching data&#x27;</span>);</span><br><span class="line">fetch(<span class="string">&#x27;https://api.github.com/users/wesbos&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> data.json())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.timeEnd(<span class="string">&#x27;fetching data&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 테이블 표기</span></span><br><span class="line"><span class="built_in">console</span>.table(dogs);</span><br></pre></td></tr></table></figure><p>콘솔이 이렇게 다양함에도 불구하고 개인적으로<br><code>console.log()</code>와 <code>console.dir()</code>로 대부분 해결하고는 했다.</p><p>때문에 앞으로 의식적으로라도 활용하기 좋을 것 같은 것들만 정리했다.</p><hr><p><img src="http://i3.ytimg.com/vi/RIPYsKx1iiU/maxresdefault.jpg"></p><h1 id="10-JS-Checkbox-Challenge"><a href="#10-JS-Checkbox-Challenge" class="headerlink" title="10. JS Checkbox Challenge!"></a>10. JS Checkbox Challenge!</h1><p>영상: <a href="https://youtu.be/RIPYsKx1iiU">https://youtu.be/RIPYsKx1iiU</a> </p><p><code>shift</code> 키로 전체 선택 가능한 체크박스 리스트</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> checkboxes = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.inbox input[type=&quot;checkbox&quot;]&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 마지막으로 선택된 체크박스</span></span><br><span class="line"><span class="keyword">let</span> lastChecked;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleCheck</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> inBetween = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 쉬프트 키 이벤트 발생 &amp; 체크박스 true 트리거</span></span><br><span class="line">  <span class="keyword">if</span> (e.shiftKey &amp;&amp; <span class="built_in">this</span>.checked) &#123;</span><br><span class="line"></span><br><span class="line">    checkboxes.forEach(<span class="function">(<span class="params">checkbox</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (checkbox === <span class="built_in">this</span> || checkbox === lastChecked) &#123;</span><br><span class="line">        inBetween = !inBetween;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (inBetween) &#123;</span><br><span class="line">        checkbox.checked = <span class="literal">true</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  lastChecked = <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line">checkboxes.forEach(<span class="function">(<span class="params">checkbox</span>) =&gt;</span> checkbox.addEventListener(<span class="string">&#x27;click&#x27;</span>, handleCheck));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Flag 변수 <code>inBetween</code> &amp; <code>lastChecked</code>를 활용한다</li><li><code>this</code>의 잦은 활용과 불필요해보이는 <code>if문</code>이 있어 리팩토링해볼만 할 부분으로 보인다.</li><li><code>checkboxes</code>에 이벤트 등록 방법을 달리할 수 있을 것 같다.</li></ul><hr><p><img src="http://i3.ytimg.com/vi/yx-HYerClEA/maxresdefault.jpg"></p><h1 id="11-Custom-HTML5-Video-Player"><a href="#11-Custom-HTML5-Video-Player" class="headerlink" title="11. Custom HTML5 Video Player"></a>11. Custom HTML5 Video Player</h1><p>영상: <a href="https://youtu.be/yx-HYerClEA">https://youtu.be/yx-HYerClEA</a> </p><p>HTML5 API를 활용한 비디오 플레이어 핸들링 방법을 다룬다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 비디오 플레이 토글</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">togglePlay</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> method = video.paused ? <span class="string">&#x27;play&#x27;</span> : <span class="string">&#x27;pause&#x27;</span>;</span><br><span class="line">  video[method]();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 비디오 플레이 버튼 아이콘 변경</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">updateButton</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> icon = <span class="built_in">this</span>.paused ? <span class="string">&#x27;►&#x27;</span> : <span class="string">&#x27;❚ ❚&#x27;</span>;</span><br><span class="line">  toggle.textContent = icon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 스킵 버튼 클릭시 비디오 현재 플레이 시간에 반영</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">skip</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> video.currentTime += <span class="built_in">parseFloat</span>(<span class="built_in">this</span>.dataset.skip);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3가지 레인지 영역에 대한 핸들링을 한번에 처리</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleRangeUpdate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  video[<span class="built_in">this</span>.name] = <span class="built_in">this</span>.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// timeupdate 이벤트 발생시 진행바의 스타일링 수정</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleProgress</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> percent = (video.currentTime / video.duration) * <span class="number">100</span>;</span><br><span class="line">  progressBar.style.flexBasis = <span class="string">`<span class="subst">$&#123;percent&#125;</span>%`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 비디오 재생 진행바에 대한 마우스 이벤트(클릭/다운/업/무브)를 처리한다</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrub</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> scrubTime = (e.offsetX / progress.offsetWidth) * video.duration;</span><br><span class="line">  video.currentTime = scrubTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>video API의 <code>play</code>, <code>pause</code>, <code>timeupdate</code> 이벤트 타입 활용도와 강력함을 알 수 있었다.</p><p>이밖에도 활용도 높은 API가 있기 때문에 HTML5 지원 환경에서 작업시<br>HTML5 API만으로 괜찮은 비디오 플레이어를 개발할 수 있을 것 같다.</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 4주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;14 Must Know Chrome Dev Tools Tricks&lt;/li&gt;
&lt;li&gt;JS Checkbox Challenge!&lt;/li&gt;
&lt;li&gt;Custom HTML5 Video Player&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
    <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
    <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
    <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/03/17/2019-03-17-javascipt30-3/"/>
    <id>https://devjang.github.io/2019/03/17/2019-03-17-javascipt30-3/</id>
    <published>2019-03-16T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.859Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 3주차</p><ul><li>Ajax Type Ahead with fetch()</li><li>Array Cardio Day 2</li><li>Let’s build something fun with HTML5 Canvas</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/y4gZMJKAeWs/maxresdefault.jpg"></p><h1 id="6-Ajax-Type-Ahead-with-fetch"><a href="#6-Ajax-Type-Ahead-with-fetch" class="headerlink" title="6. Ajax Type Ahead with fetch()"></a>6. Ajax Type Ahead with fetch()</h1><p>영상: <a href="https://youtu.be/y4gZMJKAeWs">https://youtu.be/y4gZMJKAeWs</a></p><p>미리 준비된 JSON Data를 Fetch API를 사용하여 받아온 후 정규표현식을 통해 조작한다.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fetch(endpoint)</span><br><span class="line">  .then(<span class="function"><span class="params">blob</span> =&gt;</span> blob.json())</span><br><span class="line">  .then(<span class="function"><span class="params">data</span> =&gt;</span> cities.push(...data));</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/API/Body/json">body.json()</a>를 사용하여 JSON을 파싱하는데 <code>JSON.parse()</code>와 다른 부분이 흥미롭다<br><code>body.json()</code>의 경우 <strong>비동기</strong>이며 <strong>Promise 객체를 반환</strong>한다.</li></ul><p>참고자료: <a href="https://stackoverflow.com/questions/48295439/json-parse-vs-json">body.json() vs JSON.parse()</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">numberWithCommas</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x.toString().replace(<span class="regexp">/\B(?=(\d&#123;3&#125;)+(?!\d))/g</span>, <span class="string">&#x27;,&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>3자리 단위로 콤마를 찍어주는 정규표현식</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Case 1</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(wordToMatch, <span class="string">&#x27;gi&#x27;</span>);</span><br><span class="line"><span class="keyword">return</span> place.city.match(regex) || place.state.match(regex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Case 2</span></span><br><span class="line"><span class="keyword">const</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="built_in">this</span>.value, <span class="string">&#x27;gi&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> cityName = place.city.replace(regex, <span class="string">`&lt;span class=&quot;hl&quot;&gt;<span class="subst">$&#123;<span class="built_in">this</span>.value&#125;</span>&lt;/span&gt;`</span>);</span><br><span class="line"><span class="keyword">const</span> stateName = place.state.replace(regex, <span class="string">`&lt;span class=&quot;hl&quot;&gt;<span class="subst">$&#123;<span class="built_in">this</span>.value&#125;</span>&lt;/span&gt;`</span>);</span><br></pre></td></tr></table></figure><ul><li>정규표현식 메서드를 사용하기 위한 방법</li></ul><hr><p><img src="http://i3.ytimg.com/vi/QNmRfyNg1lw/maxresdefault.jpg"></p><h1 id="7-Array-Cardio-Day-2"><a href="#7-Array-Cardio-Day-2" class="headerlink" title="7. Array Cardio Day 2"></a>7. Array Cardio Day 2</h1><p>영상: <a href="https://youtu.be/QNmRfyNg1lw">https://youtu.be/QNmRfyNg1lw</a> </p><p>JavaScript Array 강화 훈련2</p><p>이전에 나왔던 4강의 <strong>JavaScript Array Cardio Practice - Day 1</strong>과 별 다를게 없었다.</p><p><strong>강의 속 사용된 Array Method</strong></p><blockquote><ul><li>Array.prototype.some</li><li>Array.prototype.every</li><li>Array.prototype.find</li><li>Array.prototype.findIndex</li></ul></blockquote><hr><p><img src="http://i3.ytimg.com/vi/8ZGAzJ0drl0/maxresdefault.jpg"></p><h1 id="8-Let’s-build-something-fun-with-HTML5-Canvas"><a href="#8-Let’s-build-something-fun-with-HTML5-Canvas" class="headerlink" title="8. Let’s build something fun with HTML5 Canvas"></a>8. Let’s build something fun with HTML5 Canvas</h1><p>영상: <a href="https://youtu.be/8ZGAzJ0drl0">https://youtu.be/8ZGAzJ0drl0</a> </p><p>HTML5 Canvas를 활용한 그림판</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;draw&quot;</span> <span class="attr">width</span>=<span class="string">&quot;800&quot;</span> <span class="attr">height</span>=<span class="string">&quot;800&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>캔버스 DOM 요소 생성</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> canvas = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#draw&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>캔버스 생성시 렌더링 타입을 <code>getContext()</code>를 통해 초기화해줘야한다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 윤곽선 색상</span></span><br><span class="line">ctx.strokeStyle = <span class="string">&#x27;#BADA55&#x27;</span>;</span><br><span class="line"><span class="comment">// 모서리 스타일</span></span><br><span class="line">ctx.lineJoin = <span class="string">&#x27;round&#x27;</span>;</span><br><span class="line"><span class="comment">// 선의 끝점 스타일</span></span><br><span class="line">ctx.lineCap = <span class="string">&#x27;round&#x27;</span>;</span><br><span class="line">ctx.lineWidth = <span class="number">100</span>;</span><br><span class="line"><span class="comment">// 도형이 겹쳐질때의 방식</span></span><br><span class="line">ctx.globalCompositeOperation = <span class="string">&#x27;multiply&#x27;</span>;</span><br><span class="line"><span class="comment">// 도형을 그릴때의 시작 경로</span></span><br><span class="line">ctx.beginPath();</span><br><span class="line"><span class="comment">// 지정된 좌표로 이동</span></span><br><span class="line">ctx.moveTo(lastX, lastY);</span><br><span class="line"><span class="comment">// 지정된 위치까지 선을 그린다</span></span><br><span class="line">ctx.lineTo(e.offsetX, e.offsetY);</span><br><span class="line"><span class="comment">// 현재 or 지정된 경로로 윤곽선을 그린다.</span></span><br><span class="line">ctx.stroke();</span><br></pre></td></tr></table></figure><p>전체적인 로직은 마우스 이벤트를 감지한 후 캔버스 객체를 활용하여 그림을 그리는 방식이다.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 3주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ajax Type Ahead with fetch()&lt;/li&gt;
&lt;li&gt;Array Cardio Day 2&lt;/li&gt;
&lt;li&gt;Let’s build something fun with HTML5 Canvas&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
    <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
    <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
    <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/03/10/2019-03-10-javascipt30-2/"/>
    <id>https://devjang.github.io/2019/03/10/2019-03-10-javascipt30-2/</id>
    <published>2019-03-09T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.859Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 2주차</p><ul><li>Woah! CSS Variables?!</li><li>JavaScript Array Cardio Practice - Day 1</li><li>Flexbox + JavaScript Image Gallery</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/AHLNzv13c2I/maxresdefault.jpg"></p><h1 id="3-Woah-CSS-Variables"><a href="#3-Woah-CSS-Variables" class="headerlink" title="3. Woah! CSS Variables?!"></a>3. Woah! CSS Variables?!</h1><p>영상: <a href="https://youtu.be/AHLNzv13c2I">https://youtu.be/AHLNzv13c2I</a></p><p><a href="https://developer.mozilla.org/ko/docs/Web/CSS/Using_CSS_variables">사용자 정의 CSS 속성 사용하기 (변수)</a></p><p>이번 섹션에서 JavaScript는 특별한 부분이 딱히 보이지 않았으며 CSS에 흥미로운 점이 있었다.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attribute">--base</span>: <span class="number">#ffc600</span>;</span><br><span class="line">  <span class="attribute">--spacing</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">--blur</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="built_in">var</span>(--spacing);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">var</span>(--base);</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(var(--blur));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.hl</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--base);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>가상 클래스 <code>:root</code>를 통하여 변수를 <code>선언</code>할 수 있다</li><li><code>--</code> 프리픽스를 통해 변수를 <code>사용</code>할 수 있다</li><li><code>getPropertyValue</code>와 <code>setProperty</code>를 사용하여 JS로도 접근이 가능하다</li></ul><p>자세한 정보: <a href="https://wit.nts-corp.com/2017/06/27/4731">https://wit.nts-corp.com/2017/06/27/4731</a></p><hr><p><img src="http://i3.ytimg.com/vi/HB1ZC7czKRs/maxresdefault.jpg"></p><h1 id="4-JavaScript-Array-Cardio-Practice-Day-1"><a href="#4-JavaScript-Array-Cardio-Practice-Day-1" class="headerlink" title="4. JavaScript Array Cardio Practice - Day 1"></a>4. JavaScript Array Cardio Practice - Day 1</h1><p>영상: <a href="https://youtu.be/HB1ZC7czKRs">https://youtu.be/HB1ZC7czKRs</a> </p><p>JavaScript Array 강화 훈련</p><p>이번 섹션에서는 다양한 Array 기본 내장 메서드를 활용하는 섹션이기때문에 딱히 어려움은 없었다.</p><p><strong>강의 속 사용된 Array Method</strong></p><blockquote><ul><li>Array.prototype.map</li><li>Array.prototype.filter</li><li>Array.prototype.sort</li><li>Array.prototype.reduce</li></ul></blockquote><hr><p><img src="http://i3.ytimg.com/vi/9eif30i26jg/maxresdefault.jpg"></p><h1 id="5-Flexbox-JavaScript-Image-Gallery"><a href="#5-Flexbox-JavaScript-Image-Gallery" class="headerlink" title="5. Flexbox + JavaScript Image Gallery"></a>5. Flexbox + JavaScript Image Gallery</h1><p>영상: <a href="https://youtu.be/9eif30i26jg">https://youtu.be/9eif30i26jg</a> </p><p>Flexbox를 활용한 이미지 갤러리</p><p>Flexbox를 통해 레이아웃된 이 이미지 갤러리에 트랜지션(<code>transitionend</code>) 효과를 트리거하여 동작하는 구동 방식이다.</p><ul><li>Safari에서의 <code>transitionend</code> 이벤트 프로퍼티명은 <code>flex</code></li><li>Chrome에서의 <code>transitionend</code> 이벤트 프로퍼티명은 <code>flex-grow</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> panels = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.panel&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleOpen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;Hello&#x27;</span>);</span><br><span class="line">  <span class="built_in">this</span>.classList.toggle(<span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toggleActive</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(e.propertyName);</span><br><span class="line">  <span class="keyword">if</span> (e.propertyName.includes(<span class="string">&#x27;flex&#x27;</span>)) &#123;</span><br><span class="line">    <span class="built_in">this</span>.classList.toggle(<span class="string">&#x27;open-active&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">panels.forEach(<span class="function"><span class="params">panel</span> =&gt;</span> panel.addEventListener(<span class="string">&#x27;click&#x27;</span>, toggleOpen));</span><br><span class="line">panels.forEach(<span class="function"><span class="params">panel</span> =&gt;</span> panel.addEventListener(<span class="string">&#x27;transitionend&#x27;</span>, toggleActive));</span><br></pre></td></tr></table></figure><ul><li><code>classList.toggle()</code>은 jQuery의 <code>toggleClass()</code>과 같은 동작을 한다.</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 2주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Woah! CSS Variables?!&lt;/li&gt;
&lt;li&gt;JavaScript Array Cardio Practice - Day 1&lt;/li&gt;
&lt;li&gt;Flexbox + JavaScript Image Gallery&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
    <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
    <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
    <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
  <entry>
    <title>Vanilla JS 30</title>
    <link href="https://devjang.github.io/2019/03/03/2019-03-03-javascipt30-1/"/>
    <id>https://devjang.github.io/2019/03/03/2019-03-03-javascipt30-1/</id>
    <published>2019-03-02T15:00:00.000Z</published>
    <updated>2020-08-18T13:48:29.859Z</updated>
    
    <content type="html"><![CDATA[<p>30 Day Vanilla JS Coding Challenge Study - 1주차</p><ul><li>JavaScript Drum Kit</li><li>CSS + JS Clock</li></ul><a id="more"></a><p><img src="http://i3.ytimg.com/vi/VuN8qwZoego/maxresdefault.jpg"></p><h1 id="1-JavaScript-Drum-Kit"><a href="#1-JavaScript-Drum-Kit" class="headerlink" title="1. JavaScript Drum Kit"></a>1. JavaScript Drum Kit</h1><p>영상: <a href="https://youtu.be/VuN8qwZoego">https://youtu.be/VuN8qwZoego</a> </p><p>백그라운드에서 입력받으면 키를 통해 이미 지정된 로컬 경로의 이미지가 실행되는 방식이다.<br>(CSS 효과도 있다)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;65&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/clap.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">data-key</span>=<span class="string">&quot;83&quot;</span> <span class="attr">src</span>=<span class="string">&quot;sounds/hihat.wav&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line">.</span><br><span class="line">.</span><br></pre></td></tr></table></figure><ul><li><a href="https://developer.mozilla.org/ko/docs/Web/HTML/Element/audio">HTML5 <code>&lt;audio&gt;</code></a> 요소가 사용되었다.</li><li>입력받을 키코드를 미리 <a href="https://developer.mozilla.org/ko/docs/Web/HTML/Global_attributes/data-*">data-*</a>를 통해 커스텀 어트리뷰트로 정의하였다.</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> audio = <span class="built_in">document</span>.querySelector(<span class="string">`audio[data-key=&quot;<span class="subst">$&#123;e.keyCode&#125;</span>&quot;]`</span>);</span><br><span class="line"><span class="keyword">const</span> key = <span class="built_in">document</span>.querySelector(<span class="string">`div[data-key=&quot;<span class="subst">$&#123;e.keyCode&#125;</span>&quot;]`</span>);</span><br></pre></td></tr></table></figure><ul><li><strong><code>data-*</code></strong> 셀렉팅 방법</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">audio.currentTime = <span class="number">0</span>;</span><br><span class="line">audio.play();</span><br></pre></td></tr></table></figure><ul><li><strong><code>HTML &lt;audio&gt;</code></strong> API 활용<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> keys = <span class="built_in">Array</span>.from(<span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.key&#x27;</span>));</span><br><span class="line">keys.forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> key.addEventListener(<span class="string">&#x27;transitionend&#x27;</span>, removeTransition));</span><br></pre></td></tr></table></figure></li><li>굳이 <code>Array.from</code>를 사용하지 않고 <code>for of...</code>만 활용하는 것이 더 좋을 것 같다.</li></ul><p><img src="http://i3.ytimg.com/vi/xu87YWbr4X0/maxresdefault.jpg"></p><h1 id="2-CSS-JS-Clock"><a href="#2-CSS-JS-Clock" class="headerlink" title="2. CSS + JS Clock"></a>2. CSS + JS Clock</h1><p>영상: <a href="https://youtu.be/xu87YWbr4X0">https://youtu.be/xu87YWbr4X0</a> </p><p>CSS의 이용한 transform을 이용한 JS Clock</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDate</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> seconds = now.getSeconds();</span><br><span class="line">  <span class="keyword">const</span> mins = now.getMinutes();</span><br><span class="line">  <span class="keyword">const</span> hour = now.getHours();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> secondsDegrees = (seconds / <span class="number">60</span>) * <span class="number">360</span> + <span class="number">90</span>;</span><br><span class="line">  <span class="keyword">const</span> minsDegrees = (mins / <span class="number">60</span>) * <span class="number">360</span> + (seconds / <span class="number">60</span>) * <span class="number">6</span> + <span class="number">90</span>;</span><br><span class="line">  <span class="keyword">const</span> hourDegrees = (hour / <span class="number">12</span>) * <span class="number">360</span> + (mins / <span class="number">60</span>) * <span class="number">30</span> + <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line">  secondHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;secondsDegrees&#125;</span>deg)`</span>;</span><br><span class="line">  minsHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;minsDegrees&#125;</span>deg)`</span>;</span><br><span class="line">  hourHand.style.transform = <span class="string">`rotate(<span class="subst">$&#123;hourDegrees&#125;</span>deg)`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>시분초가 한번에 핸들링 되는 <code>setDate()</code> 함수를 1000밀리세컨드마다 <code>setInterval()</code>을 통해 호출하고 있다.</li><li>시분초의 DOM을 미리 정의하고 셀렉팅하여 CSS의 <code>transform : rotate의 각도</code>를 1000밀리세컨드마다 변경해준다.</li><li>특별한 로직이 없지만 CSS만으로도 얼마나 많은 효과를 줄 수 있는지 다시 한번 깨닫는다</li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;30 Day Vanilla JS Coding Challenge Study - 1주차&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript Drum Kit&lt;/li&gt;
&lt;li&gt;CSS + JS Clock&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="TIL" scheme="https://devjang.github.io/categories/TIL/"/>
    
    <category term="javascript" scheme="https://devjang.github.io/categories/TIL/javascript/"/>
    
    <category term="javascipt30" scheme="https://devjang.github.io/categories/TIL/javascript/javascipt30/"/>
    
    
    <category term="vanilla javascript" scheme="https://devjang.github.io/tags/vanilla-javascript/"/>
    
  </entry>
  
</feed>
